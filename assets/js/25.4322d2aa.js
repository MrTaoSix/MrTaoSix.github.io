(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{505:function(t,n,a){"use strict";a.r(n);var s=a(29),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#常用版本分为四大阵营"}},[t._v("常用版本分为四大阵营")])]),a("li",[a("a",{attrs:{href:"#下载并解压安装包"}},[t._v("下载并解压安装包")])]),a("li",[a("a",{attrs:{href:"#启动服务"}},[t._v("启动服务")])]),a("li",[a("a",{attrs:{href:"#重启服务"}},[t._v("重启服务")])]),a("li",[a("a",{attrs:{href:"#关闭服务"}},[t._v("关闭服务")])]),a("li",[a("a",{attrs:{href:"#查看nginx进程是否启动"}},[t._v("查看nginx进程是否启动")])]),a("li",[a("a",{attrs:{href:"#安装成系统服务"}},[t._v("安装成系统服务")])]),a("li",[a("a",{attrs:{href:"#开机启动"}},[t._v("开机启动")])]),a("li",[a("a",{attrs:{href:"#目录结构"}},[t._v("目录结构")])]),a("li",[a("a",{attrs:{href:"#指令和指令块介绍-主配置文件"}},[t._v("指令和指令块介绍（主配置文件）")]),a("ul",[a("li",[a("a",{attrs:{href:"#include"}},[t._v("include")])])])]),a("li",[a("a",{attrs:{href:"#虚拟主机原理"}},[t._v("虚拟主机原理")])]),a("li",[a("a",{attrs:{href:"#完整匹配"}},[t._v("完整匹配")])]),a("li",[a("a",{attrs:{href:"#通配符匹配"}},[t._v("通配符匹配")])]),a("li",[a("a",{attrs:{href:"#通配符结束匹配"}},[t._v("通配符结束匹配")])]),a("li",[a("a",{attrs:{href:"#正则匹配"}},[t._v("正则匹配")])]),a("li",[a("a",{attrs:{href:"#特殊匹配格式"}},[t._v("特殊匹配格式")])]),a("li",[a("a",{attrs:{href:"#匹配顺序"}},[t._v("匹配顺序")])]),a("li",[a("a",{attrs:{href:"#优化"}},[t._v("优化")])]),a("li",[a("a",{attrs:{href:"#附录"}},[t._v("附录：")])]),a("li",[a("a",{attrs:{href:"#短网址"}},[t._v("短网址")])]),a("li",[a("a",{attrs:{href:"#代理两台服务器的配置-轮询"}},[t._v("代理两台服务器的配置(轮询)")])]),a("li",[a("a",{attrs:{href:"#权重模式"}},[t._v("权重模式")])]),a("li",[a("a",{attrs:{href:"#其他负载均衡策略-不常用"}},[t._v("其他负载均衡策略（不常用）")]),a("ul",[a("li",[a("a",{attrs:{href:"#ip-hash"}},[t._v("ip_hash")])]),a("li",[a("a",{attrs:{href:"#least-conn"}},[t._v("least_conn")])]),a("li",[a("a",{attrs:{href:"#url-hash-需要第三方插件"}},[t._v("url_hash（需要第三方插件）")])]),a("li",[a("a",{attrs:{href:"#fair-需要第三方插件"}},[t._v("fair（需要第三方插件）")])])])]),a("li",[a("a",{attrs:{href:"#使用正则配置动静分离"}},[t._v("使用正则配置动静分离")])]),a("li",[a("a",{attrs:{href:"#location正则"}},[t._v("location正则：")])]),a("li",[a("a",{attrs:{href:"#location的说明"}},[t._v("location的说明")])]),a("li",[a("a",{attrs:{href:"#实际网站使用中-至少有三个匹配规则定义"}},[t._v("实际网站使用中，至少有三个匹配规则定义:")]),a("ul",[a("li",[a("a",{attrs:{href:"#urlrewrite的优缺点"}},[t._v("URLRewrite的优缺点")])])])]),a("li",[a("a",{attrs:{href:"#nginx防盗链配置"}},[t._v("nginx防盗链配置")]),a("ul",[a("li",[a("a",{attrs:{href:"#valid-referers解释"}},[t._v("valid_referers解释")])])])]),a("li",[a("a",{attrs:{href:"#配置错误提示页面"}},[t._v("配置错误提示页面")]),a("ul",[a("li",[a("a",{attrs:{href:"#高可用场景及解决方案"}},[t._v("高可用场景及解决方案")])]),a("li",[a("a",{attrs:{href:"#安装keepalived"}},[t._v("安装keepalived")])]),a("li",[a("a",{attrs:{href:"#keepalived实战"}},[t._v("keepalived实战")])])])])])]),a("p"),t._v(" "),a("h1",{attrs:{id:"nginx-入门学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-入门学习"}},[t._v("#")]),t._v(" Nginx 入门学习")]),t._v(" "),a("h1",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),a("p",[t._v("Nginx是一个轻量级、高性能、稳定性高、并发性好的HTTP和反向代理服务器。也是由于其的特性，其应用非常广。")]),t._v(" "),a("blockquote",[a("p",[t._v("Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。")])]),t._v(" "),a("h1",{attrs:{id:"nginx-的四个发行版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的四个发行版本"}},[t._v("#")]),t._v(" Nginx 的四个发行版本")]),t._v(" "),a("h2",{attrs:{id:"常用版本分为四大阵营"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用版本分为四大阵营"}},[t._v("#")]),t._v(" 常用版本分为四大阵营")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Nginx开源版：[干净纯粹，二次开发难]")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://nginx.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx news"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("Nginx plus 商业版 【可以直接使用】")])])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.nginx.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Advanced Load Balancer, Web Server, & Reverse Proxy - NGINX"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("openresty [nginx + lua 整合 + 个人定制话功能 + 免费开源]")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://openresty.org/cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenResty® - 中文官方站"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("Tengine [性能高、无需二次开发、稳定]")])])]),t._v(" "),a("p",[t._v("​    "),a("a",{attrs:{href:"http://tengine.taobao.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Tengine Web Server"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"安装部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装部署"}},[t._v("#")]),t._v(" 安装部署")]),t._v(" "),a("h2",{attrs:{id:"下载并解压安装包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载并解压安装包"}},[t._v("#")]),t._v(" 下载并解压安装包")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("//进入一个零时文件夹\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /tmp\n\n//下载tar包\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://nginx.org/download/nginx-1.8.1.tar.gz\n\n//解压到指定目录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xvf nginx-1.8.1.tar.gz -C  /usr/local/\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/nginx-1.8.1\n\n//配置\n./configure\n\n//安装\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("p",[t._v("也可以通过官网下载安装包  "),a("a",{attrs:{href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx: download"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"启动服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动服务"}},[t._v("#")]),t._v(" 启动服务")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("//进入nginx目录\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/nginx\n\n//使用自带配置启动服务\n./sbin/nginx -c conf/nginx.conf\n\n")])])]),a("blockquote",[a("p",[t._v("可以进入网页查看 "),a("strong",[t._v("localhost:80")]),t._v("  如果是云服务器 记得开放端口")])]),t._v(" "),a("h2",{attrs:{id:"重启服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启服务"}},[t._v("#")]),t._v(" 重启服务")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nginx -s reload   重新加载配置\n")])])]),a("h2",{attrs:{id:"关闭服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭服务"}},[t._v("#")]),t._v(" 关闭服务")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nginx -s stop 快速关闭\nnginx -s quit 优雅的关闭，在关闭前处理完请求\n")])])]),a("h2",{attrs:{id:"查看nginx进程是否启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看nginx进程是否启动"}},[t._v("#")]),t._v(" 查看nginx进程是否启动")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ps -ef | grep nginx\n")])])]),a("p",[t._v("若想使用外部主机访问nginx，需要关闭服务器防火墙或开放nginx服务端口，端口为上一步nginx.conf的配置端口：")]),t._v(" "),a("p",[t._v("centOS6 及以前版本使用命令： systemctl stop iptables.service")]),t._v(" "),a("p",[t._v("centOS7 关闭防火墙命令： systemctl stop firewalld.service")]),t._v(" "),a("blockquote",[a("p",[t._v("最好不要关闭防火墙，只对外开放一个端口。")]),t._v(" "),a("p",[t._v("开放端口： firewall-cmd --query-port=80/tcp")])]),t._v(" "),a("h2",{attrs:{id:"安装成系统服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装成系统服务"}},[t._v("#")]),t._v(" 安装成系统服务")]),t._v(" "),a("p",[a("strong",[t._v("创建服务脚本")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vi /usr/lib/systemd/system/nginx.service\n")])])]),a("p",[a("strong",[t._v("脚本内容")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[Unit]\nDescription=nginx -  web server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/usr/local/nginx/logs/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s stop\nExecQuit=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n")])])]),a("blockquote",[a("p",[t._v("复制的时候注意第一行容易缺失。特别注意")])]),t._v(" "),a("p",[a("strong",[t._v("重新加载系统服务")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" systemctl daemon-reload\n\n\n //启动nginx（启动前kill 掉之前的服务）\n$ systemctl start nginx.service\n\n // 查看状态\n $ systemctl status nginx.service\n\n//停止nginx\n$ systemctl stop nginx.service\n\n//重载nginx\n$ systemctl reload nginx.service\n")])])]),a("h2",{attrs:{id:"开机启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开机启动"}},[t._v("#")]),t._v(" 开机启动")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl enable firewalld.service\n")])])]),a("h1",{attrs:{id:"目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),a("h2",{attrs:{id:"目录结构-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构-2"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),a("p",[t._v("首先安装tree这个命令，这个命令可以将我们的目录以文件树的形式展开。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y tree\n\n//查看目录结构\ntree /usr/local/nginx\n")])])]),a("p",[t._v("目录结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@localhost ~]# tree /usr/local/nginx\n/usr/local/nginx\n├── client_body_temp                 # POST 大文件暂存目录\n├── conf                             # Nginx所有配置文件的目录\n│   ├── fastcgi.conf                 # fastcgi相关参数的配置文件\n│   ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件\n│   ├── fastcgi_params               # fastcgi的参数文件\n│   ├── fastcgi_params.default       \n│   ├── koi-utf\n│   ├── koi-win\n│   ├── mime.types                   # 媒体类型\n│   ├── mime.types.default\n│   ├── nginx.conf                   #这是Nginx默认的主配置文件，日常使用和修改的文件\n│   ├── nginx.conf.default\n│   ├── scgi_params                  # scgi相关参数文件\n│   ├── scgi_params.default  \n│   ├── uwsgi_params                 # uwsgi相关参数文件\n│   ├── uwsgi_params.default\n│   └── win-utf\n├── fastcgi_temp                     # fastcgi临时数据目录\n├── html                             # Nginx默认站点目录\n│   ├── 50x.html                     # 错误页面优雅替代显示文件，例如出现502错误时会调用此页面\n│   └── index.html                   # 默认的首页文件\n├── logs                             # Nginx日志目录\n│   ├── access.log                   # 访问日志文件\n│   ├── error.log                    # 错误日志文件\n│   └── nginx.pid                    # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件\n├── proxy_temp                       # 临时目录\n├── sbin                             # Nginx 可执行文件目录\n│   └── nginx                        # Nginx 二进制可执行程序\n├── scgi_temp                        # 临时目录\n└── uwsgi_temp                       # 临时目录\n\n")])])]),a("h2",{attrs:{id:"指令和指令块介绍-主配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令和指令块介绍-主配置文件"}},[t._v("#")]),t._v(" 指令和指令块介绍（主配置文件）")]),t._v(" "),a("p",[t._v("下面是一个去除了注释的nginx.conf文件内容")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("\n#===================全局块开始======================\n#user  nobody;\n#工作进程数，一般配置成和cpu数量一致\nworker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n\n#全局错误日志及pid文件存放位置\nerror_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#nginx 启动master进程pid号\n#pid        logs/nginx.pid;\n\n#=================全局块结束============================\n\n\n#==============events块开始======================\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#标识单个worker进程的最大并发数\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#============events块结束============================\n\n\n#============http块开始（nginx服务器中配置最频繁的部分，配置虚拟主机，监听端口，请求转发等等）==========================\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #引入 mime 类型定义文件\n    include       mime.types;\n    default_type  application/octet-stream;\n\n   #设置日志生成格式\n    #log_format  main  '$remote_addr - $remote_user "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$time_local"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$request"')]),t._v(" '\n    #                  '$status $body_bytes_sent "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$http_referer"')]),t._v(" '\n    #                  '"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$http_user_agent"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$http_x_forwarded_for"')]),t._v("';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n\n  #连接的超时时间\n    #keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(";\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n   #解开注释就是开启gzip压缩\n    #gzip  on;\n\n    #此处配置多台tomcat服务器(名称不能有下划线：webServer）\n    upstream webServer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v(";\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8082")]),t._v(";\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#此处配置多台tomcat服务器(名称不能有下划线：webs2Server）\n    #upstream webs2Server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      #server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30.19")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8083")]),t._v(";\n      #server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.12")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8085")]),t._v(";\n    #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #定义当前这个server监听的端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        #定义使用localhost访问\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #默认请求地址，如果请求是："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.80")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/  那么会进入这个里面的tomcat反向代理地址\n        #一个location里面只能有一个proxy_pass\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #此处可以配置Tomcat反向代理地址比如：\n        #此处可以引用上面upstream 的多台tomcat；也可以单独配置一台\n        proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//127.0.0.1:8081/; #配置单台")]),t._v("\n        #proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//webServer/; #引用上面的多台")]),t._v("\n        #引用上面的多台配置\n           # root   html; #默认的网站根目录的位置\n            #index  index.html index.htm; #网站的欢迎页"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("起始页\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n        #表示如果请求是："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.80")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/web 那么会进入这个里面的tomcat反向代理地址\n        location /web "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #此处引用上面的配置的多台tomcat\n        #proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//127.0.0.1:8082/;")]),t._v("\n        #proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//web2Server/; #引用上面的多台Tomcat配置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        #error_page  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v("              /"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v(".html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n\n        #错误提示页面\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        # proxy the PHP scripts to Apache listening on "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n        #\n        #location ~ \\.php$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #    proxy_pass   http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//127.0.0.1;")]),t._v("\n        #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        # pass the PHP scripts to FastCGI server listening on "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),t._v("\n        #\n        #location ~ \\.php$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #    root           html;\n        #    fastcgi_pass   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),t._v(";\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        # deny access to .htaccess files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        #    deny  all;\n        #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    # another virtual host using mix of IP-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and port-based configuration\n    #\n    #server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v(";\n    #    listen       somename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(";\n    #    server_name  somename  alias  another.alias;\n\n    #    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #        root   html;\n    #        index  index.html index.htm;\n    #    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    # HTTPS server\n    #\n    #server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(" ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("SSL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("!aNULL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #        root   html;\n    #        index  index.html index.htm;\n    #    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的指令主要有两部分组成")]),t._v(" "),a("ul",[a("li",[t._v("指令：由名称和参数组成，以空格分隔，以分号结尾，如   worker_processes  1;")]),t._v(" "),a("li",[t._v("指令块：就是由名称和大括号{}组成，指令块可以包含指令块与简单指令。\n上面配置中，http块全局参数，对整体产生影响；server块是虚拟主机，主要对指定的主机和端口号进行配置，而location块是虚拟主机根据请求的URI进行访问请求匹配。 用{} 包起来的就是")])]),t._v(" "),a("h3",{attrs:{id:"include"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#include"}},[t._v("#")]),t._v(" include")]),t._v(" "),a("p",[t._v("include 用来指定主配置文件包含的其他扩展配置文件，扩展文件的内容需要符合Nginx的格式规范，可以使用 nginx -t 测试配置文件内容是否规范，include 指令可以出现在全局参数、location块或server块任何一个地方，同时include也支持通配符，因此nginx的配置文件内容可以分成多个文件，这样精简配置也方便配置文件管理。")]),t._v(" "),a("p",[t._v("参考文章 https://blog.csdn.net/luweibin19/article/details/106887377")]),t._v(" "),a("h1",{attrs:{id:"基本运行原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本运行原理"}},[t._v("#")]),t._v(" 基本运行原理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/18cb3d8e9aa7d44b2e1e5f3c54231fab.png",alt:"image-20220429201217315"}})]),t._v(" "),a("p",[t._v("Nginx的进程是使用经典的「Master-Worker」模型,Nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。worker进程主要处理基本的网络事件，多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的。")]),t._v(" "),a("h1",{attrs:{id:"虚拟主机实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟主机实战"}},[t._v("#")]),t._v(" 虚拟主机实战")]),t._v(" "),a("p",[t._v("虚拟主机与域名解析\n虚拟主机是使用特殊的软硬件技术，把一台运行在因特网上的服务器主机分成一台台“虚拟”的主机，每一台虚拟主机都具有独立的域名，具有完整的Internet服务器（WWW、FTP、Email等）功能，虚拟主机之间完全独立，并可由用户自行管理，在外界看来，每一台虚拟主机和一台独立的主机完全一样。")]),t._v(" "),a("p",[t._v("域名解析就是域名到IP地址的转换过程，IP地址是网路上标识站点的数字地址，为了简单好记，采用域名来代替ip地址标识站点地址，。域名的解析工作由DNS服务器完成。")]),t._v(" "),a("p",[t._v("域名、dns、ip地址的关系\n域名是相对网站来说的，IP是相对网络来说的。当输入一个域名的时候，网页是如何做出反应的？\n输入域名----\x3e域名解析服务器（dns）解析成ip地址—>访问IP地址—>完成访问的内容—>返回信息。")]),t._v(" "),a("p",[t._v("Internet上的计算机IP是唯一的，一个IP地址对应一个计算机。\n一台计算机上面可以有很多个服务，也就是一个ip地址对应了很多个域名，即一个计算机上有很多网站。")]),t._v(" "),a("p",[t._v("IP地址和DNS地址的区别")]),t._v(" "),a("p",[t._v("IP地址是指单个主机的唯一IP地址，而DNS服务器地址是用于域名解析的地址。")]),t._v(" "),a("p",[t._v("一个是私网地址，一个是公网地址；")]),t._v(" "),a("p",[t._v("一个作为主机的逻辑标志，一个作为域名解析服务器的访问地址。")]),t._v(" "),a("p",[t._v("IP地址")]),t._v(" "),a("p",[t._v("IP，就是Internet Protocol的缩写，是一种通信协议，我们用的因特网基本是IP网组成的。")]),t._v(" "),a("p",[t._v("IP地址就是因特网上的某个设备的一个编号。")]),t._v(" "),a("p",[t._v("IP地址一般由网络号，主机号，掩码来组成。")]),t._v(" "),a("p",[t._v("IP网络上有很多路由器，路由器之间转发、通信都是只认这个IP地址，类似什么哪？就好像你寄包裹，你的写上发件人地址，你的姓名，收件人地址，收件人姓名。")]),t._v(" "),a("p",[t._v("这个发件人地址就是你电脑的IP的网络号，你的姓名就是你的主机号。")]),t._v(" "),a("p",[t._v("收件人的地址就是你要访问的IP的网络号，收件人的姓名就是访问IP的主机号。")]),t._v(" "),a("p",[t._v("现在还有了更复杂的IPV6,还有IPV9。")]),t._v(" "),a("p",[t._v("DNS是什么？")]),t._v(" "),a("p",[t._v("我们访问因特网必须知道对端的IP地址，可是我们访问网站一般只知道域名啊，怎么办？")]),t._v(" "),a("p",[t._v("这时候DNS就有用处了，电脑先访问DNS服务器，查找域名对应的IP,于是，你的电脑就知道要发包到IP地址了。")]),t._v(" "),a("p",[t._v("http协议\nHTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。")]),t._v(" "),a("p",[t._v("HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示")]),t._v(" "),a("h2",{attrs:{id:"虚拟主机原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟主机原理"}},[t._v("#")]),t._v(" 虚拟主机原理")]),t._v(" "),a("p",[t._v("虚拟主机是为了在同一台物理机器上运行多个不同的网站，提高资源利用率引入的技术。")]),t._v(" "),a("p",[t._v("一般的web服务器一个ip地址的80端口只能正确对应一个网站，处理一个域名的访问请求。而web服务器在不使用多个ip地址和端口的情况下，如果需要支持多个相对独立的网站就需要一种机制来分辨同一个ip地址上的不同网站的请求，这就出现了主机头绑定的方法。简单的说就是，将不同的网站空间对应不同的域名，以连接请求中的域名字段来分发和应答正确的对应空间的文件执行结果。举个例子来说，一台服务器ip地址为192.168.8.101，有两个域名和对应的空间在这台服务器上，使用的都是192.168.8.101的80端口来提供服务。如果只是简单的将两个域名A和B的域名记录解析到这个ip地址，那么web服务器在收到任何请求时反馈的都会是同一个网站的信息，这显然达不到要求。接下来我们使用主机头绑定域名A和B到他们对应的空间文件夹C和D。当含有域名A的web请求信息到达192.168.8.101时，web服务器将执行它对应的空间C中的首页文件，并返回给客户端，含有域名B的web请求信息同理，只不过解释的是空间D的文件，所以在使用主机头绑定功能后就不能使用ip地址访问其上的任何网站了，因为请求信息中不存在域名信息，所以会出错。")]),t._v(" "),a("p",[t._v("实际配置：")]),t._v(" "),a("h4",{attrs:{id:"监听不同域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听不同域名"}},[t._v("#")]),t._v(" 监听不同域名")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("; #允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个\n\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("%就行。\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #文件扩展名与文件类型映射表(是conf目录下的一个文件)\n    include       mime.types;\n    #默认文件类型，如果mime.types预先定义的类型没匹配上，默认使用二进制流的方式传输\n    default_type  application/octet-stream;\n\n    #sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度。\n    sendfile        on;\n\n     #长连接超时时间，单位是秒\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n #虚拟主机的配置\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #监听端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        #域名，可以有多个，用空格隔开\n        server_name  test80.xzj520520.cn;\n\n\t#配置根目录以及默认页面\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   /www/test80;\n            index  index.html index.htm;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#出错页面配置\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        #/50x.html文件所在位置\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    #虚拟主机的配置\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #监听端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        #域名，可以有多个，用空格隔开\n        server_name  test81.xzj520520.cn;\n\n\t#配置根目录以及默认页面\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   /www/test81;\n            index  index.html index.htm;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#出错页面配置\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        #/50x.html文件所在位置\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"监听多个端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听多个端口"}},[t._v("#")]),t._v(" 监听多个端口")]),t._v(" "),a("p",[t._v("修改nginx.conf")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("; #允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个\n\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("%就行。\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #文件扩展名与文件类型映射表(是conf目录下的一个文件)\n    include       mime.types;\n    #默认文件类型，如果mime.types预先定义的类型没匹配上，默认使用二进制流的方式传输\n    default_type  application/octet-stream;\n\n    #sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度。\n    sendfile        on;\n\n     #长连接超时时间，单位是秒\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n #虚拟主机的配置\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #监听端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        #域名，可以有多个，用空格隔开\n        server_name  localhost;\n\n\t#配置根目录以及默认页面\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   /www/test80;\n            index  index.html index.htm;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#出错页面配置\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        #/50x.html文件所在位置\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    #虚拟主机的配置\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #监听端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("81")]),t._v(";\n        #域名，可以有多个，用空格隔开\n        server_name  localhost;\n\n\t#配置根目录以及默认页面\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   /www/test81;\n            index  index.html index.htm;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#出错页面配置\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        #/50x.html文件所在位置\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h1",{attrs:{id:"泛域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛域名"}},[t._v("#")]),t._v(" 泛域名")]),t._v(" "),a("p",[t._v("所谓“泛域名解析”是指：利用通配符* （星号）来做次级域名以实现所有的次级域名均指向同一IP地址。")]),t._v(" "),a("p",[t._v("好处：")]),t._v(" "),a("p",[t._v("1.可以让域名支持无限的子域名(这也是泛域名解析最大的用途)。")]),t._v(" "),a("p",[t._v("2.防止用户错误输入导致的网站不能访问的问题")]),t._v(" "),a("p",[t._v("3.可以让直接输入网址登陆网站的用户输入简洁的网址即可访问网站")]),t._v(" "),a("p",[t._v("泛域名在实际使用中作用是非常广泛的，比如实现无限二级域名功能，提供免费的url转发，在IDC部门实现自动分配免费网址，在大型企业中实现网址分类管理等等，都发挥了巨大的作用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/834032090fb377ab64b5ccc4a628303b.png",alt:"image-20220430201135906"}})]),t._v(" "),a("h1",{attrs:{id:"nginx-的虚拟主机域名配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的虚拟主机域名配置"}},[t._v("#")]),t._v(" Nginx 的虚拟主机域名配置")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建站点目录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mkdir -p /www/{web/,blog/}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("配置站点首页文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[root@localhost ~]# echo "welcom to pengqinxin\'s web-server">>/www/web/index.html\n[root@localhost ~]# echo "welcom to pengqinxin\'s blog-server">>/www/blog/index.html\n[root@localhost ~]# cat /www/web/index.html\n[root@localhost ~]# cat /www/blog/index.html\n')])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v(".配置基于域名的虚拟主机")]),t._v(" （补充 扩展：域名可以是多个并列，域名之间用空格隔开 server_name中还可以使用通配符*和正则表达式）")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd /usr/local/nginx/conf/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vim nginx.conf")]),t._v("\n\n添加一下代码（添加多少个主机就添加多少个server）：\n\n server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listen  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server_name www"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pengqinxin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("自己的域名\n        location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("web"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("站点目录路径\n                index index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("html index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      listen  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      server_name blog"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pengqinxin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              index index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("html index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 保存退出\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /usr/local/nginx/sbin/nginx -t //检查语法错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /usr/local/nginx/sbin/nginx -s reload //重启服务器")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("然后配置阿里云的二级域名解析")])])]),t._v(" "),a("h1",{attrs:{id:"servicename-匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#servicename-匹配规则"}},[t._v("#")]),t._v(" ServiceName 匹配规则")]),t._v(" "),a("p",[t._v("我们可以在同一个servername中配置多个域名")]),t._v(" "),a("h2",{attrs:{id:"完整匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整匹配"}},[t._v("#")]),t._v(" 完整匹配")]),t._v(" "),a("p",[t._v("server中可以配置多个域名，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server_name  test81.xzj520520.cn  test82.xzj520520.cn;\n")])])]),a("h2",{attrs:{id:"通配符匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符匹配"}},[t._v("#")]),t._v(" 通配符匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server_name  *.xzj520520.cn;\n")])])]),a("p",[t._v("需要注意的是精确匹配的优先级大于通配符匹配和正则匹配。")]),t._v(" "),a("h2",{attrs:{id:"通配符结束匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符结束匹配"}},[t._v("#")]),t._v(" 通配符结束匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server_name  www.xzj520520.*;\n")])])]),a("h2",{attrs:{id:"正则匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配"}},[t._v("#")]),t._v(" 正则匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("servername ~^[0-9]+\\.xzJ528520\\.cn$;\n")])])]),a("p",[t._v('正则匹配格式，必须以~开头，比如：server_name ~^www\\d+.example.net$;。如果开头没有~，则nginx认为是精确匹配。在逻辑上，需要添加^和$锚定符号。注意，正则匹配格式中.为正则元字符，如果需要匹配.，则需要反斜线转义。如果正则匹配中含有{和}则需要双引号引用起来，避免nginx报错，如果没有加双引号，则nginx会报如下错误：directive "server_name" is not terminated by ";" in ...。')]),t._v(" "),a("h2",{attrs:{id:"特殊匹配格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊匹配格式"}},[t._v("#")]),t._v(" 特殊匹配格式")]),t._v(" "),a("p",[t._v('server_name ""; 匹配Host请求头不存在的情况。')]),t._v(" "),a("h2",{attrs:{id:"匹配顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配顺序"}},[t._v("#")]),t._v(" 匹配顺序")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("精确的名字")])]),t._v(" "),a("li",[a("p",[t._v("以*号开头的最长通配符名称，例如 *.example.org *")])]),t._v(" "),a("li",[a("p",[t._v("以"),a("em",[t._v("号结尾的最长通配符名称，例如 mail.")])])]),t._v(" "),a("li",[a("p",[t._v("第一个匹配的正则表达式（在配置文件中出现的顺序）")])])]),t._v(" "),a("h2",{attrs:{id:"优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("尽量使用精确匹配;")])]),t._v(" "),a("li",[a("p",[t._v("当定义大量server_name时或特别长的server_name时，需要在http级别调整server_names_hash_max_size和server_names_hash_bucket_size，否则nginx将无法启动。")])])]),t._v(" "),a("h2",{attrs:{id:"附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录：")]),t._v(" "),a("p",[t._v("为区分大小写的匹配\n~* 不区分大小写的匹配（匹配firefox的正则同时匹配FireFox）")]),t._v(" "),a("p",[t._v("!~ 区分大小写不匹配")]),t._v(" "),a("p",[t._v("!~* 不区分大小写不匹配")]),t._v(" "),a("p",[t._v(". 匹配除换行符以外的任意字符")]),t._v(" "),a("p",[t._v("\\w 匹配字母或数字或下划线或汉字")]),t._v(" "),a("p",[t._v("\\s 匹配任意的空白符")]),t._v(" "),a("p",[t._v("\\d 匹配数字")]),t._v(" "),a("p",[t._v("\\b 匹配单词的开始或结束")]),t._v(" "),a("p",[t._v("^ 匹配字符串的开始")]),t._v(" "),a("p",[t._v("$ 匹配字符串的结束")]),t._v(" "),a("p",[t._v("*重复零次或更多次前面一个字符")]),t._v(" "),a("p",[t._v("+重复一次或更多次前面一个字符")]),t._v(" "),a("p",[t._v("? 重复零次或一次前面一个字符")]),t._v(" "),a("p",[t._v("{n} 重复n次前面一个字符{n,} 重复n次或更多次")]),t._v(" "),a("p",[t._v("{n,m} 重复n到m次")]),t._v(" "),a("p",[t._v("*? 重复任意次，但尽可能少重复")]),t._v(" "),a("p",[t._v("+? 重复1次或更多次，但尽可能少重复")]),t._v(" "),a("p",[t._v("?? 重复0次或1次，但尽可能少重复{n,m}? 重复n到m次，但尽可能少重复{n,}? 重复n次以上，但尽可能少重复")]),t._v(" "),a("p",[t._v("\\W 匹配任意不是字母，数字，下划线，汉字的字符")]),t._v(" "),a("p",[t._v("\\S 匹配任意不是空白符的字符")]),t._v(" "),a("p",[t._v("\\D 匹配任意非数字的字符")]),t._v(" "),a("p",[t._v("\\B 匹配不是单词开头或结束的位置")]),t._v(" "),a("p",[t._v("[^x] 匹配除了x以外的任意字符")]),t._v(" "),a("p",[t._v("[^abc] 匹配除了abc这几个字母以外的任意字符")]),t._v(" "),a("p",[t._v("(exp) 匹配exp,并捕获文本到0…9")]),t._v(" "),a("p",[t._v("(?exp) 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name’exp)(?:exp) 匹配exp,不捕获匹配的文本，也不给此分组分配组号")]),t._v(" "),a("p",[t._v("(?=exp) 零宽断言,匹配exp前面的位置")]),t._v(" "),a("p",[t._v("(?<=exp) 匹配exp后面的位置")]),t._v(" "),a("p",[t._v("(?!exp) 匹配后面跟的不是exp的位置")]),t._v(" "),a("p",[t._v("(?<!exp) 匹配前面不是exp的位置")]),t._v(" "),a("p",[t._v("(?#comment) 注释,这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读")]),t._v(" "),a("h1",{attrs:{id:"基于域名的几种互联网企业需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于域名的几种互联网企业需求"}},[t._v("#")]),t._v(" 基于域名的几种互联网企业需求")]),t._v(" "),a("h2",{attrs:{id:"短网址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短网址"}},[t._v("#")]),t._v(" 短网址")]),t._v(" "),a("p",[t._v("用户搭建集群环境后，希望减短访问工程的网址长度，例如：访问 http://192.168.1.23 可直接跳转到 http://192.168.1.23/webroot/decision。")]),t._v(" "),a("p",[t._v("在 nginx 中做短域名的处理，使用 rewrite 指令实现，匹配所有的 / 并 rewrite 重定向到/webroot/decision，如下所示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server {\n    listen 90;\n    server_name localhost;\n\n    #匹配/ 转到/webroot/decision上；\n    #^(.*)$表示/后任意部分，除非和其它location匹配否则一律转向/webroot/decision，如果无需这样可以修改这里location或者rewrite的正则；\n    #permanent表示重定向并返回301；\n    location / {\n        rewrite ^(.*)$ /webroot/decision permanent;\n    }\n    location /webroot {\n        proxy_pass http://crm;\n        ......\n    }\n}\n")])])]),a("h1",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/2c4bf89af40ccce29bec18a69d9c3e11.png",alt:"image-20220430170948611"}})]),t._v(" "),a("p",[t._v("反向代理方式是指代理服务器来接受internet上的连接请求。然后请请求转发到内部的代理服务器，并将代理服务的结果返回给internet的请求，这个时候代理服务器对外部来说就是一台服务器。")]),t._v(" "),a("p",[t._v("反向代理服务器一般有两种模型，一种是最为内容服务器的替身，一种是作为内容服务器集群的负载均衡器。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("替身服务器")]),t._v(" "),a("p",[t._v("如果你的内容服务器需要保持安全，可以在防火墙外部设置一个代理服务器，所有的请求有代理服务器转发到内部服务器，这个时候代理服务器对外来说就是一个内容服务器")])]),t._v(" "),a("li",[a("p",[t._v("内容服务器的负载均衡器")]),t._v(" "),a("p",[t._v("可以在一个组织内使用多个代理服务器来平衡各 Web 服务器间的网络负载。在此模型中，可以利用代理服务器的高速缓存特性，创建一个用于负载平衡的服务器池。此时，代理服务器可以位于防火墙的任意一侧。如果 Web 服务器每天都会接收大量的请求，则可以使用代理服务器分担 Web 服务器的负载并提高网络访问效率。")]),t._v(" "),a("p",[t._v("对于客户机发给内容服务器的请求，代理服务器起着调停者的作用，代理服务器会将所请求的文档存入到高速缓存。如果不止一个代理服务器，DNS可以采取轮训法来选择IP地址，随机的为请求选择路由，客户机每次都是用同一个URL，但是处理请求的可能不是一台服务器。")])])]),t._v(" "),a("p",[t._v("反向代理配置如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/5f7011630051c26dceabac426398d8da.png",alt:"image-20220430182343864"}})]),t._v(" "),a("h2",{attrs:{id:"代理两台服务器的配置-轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理两台服务器的配置-轮询"}},[t._v("#")]),t._v(" 代理两台服务器的配置(轮询)")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("; #允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个\n\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("%就行。\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #文件扩展名与文件类型映射表(是conf目录下的一个文件)\n    include       mime.types;\n    #默认文件类型，如果mime.types预先定义的类型没匹配上，默认使用二进制流的方式传输\n    default_type  application/octet-stream;\n\n    #sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度。\n    sendfile        on;\n\n     #长连接超时时间，单位是秒\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n#定义一组服务器\nupstream httpds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.102")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n    server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.103")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n #虚拟主机的配置\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    #监听端口\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        #域名，可以有多个，用空格隔开\n        server_name  test80.xzj520520.cn;\n\n\t#配置根目录以及默认页面\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//httpds;")]),t._v("\n            # root   /www/test80;\n            # index  index.html index.htm;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t#出错页面配置\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        #/50x.html文件所在位置\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"权重模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权重模式"}},[t._v("#")]),t._v(" 权重模式")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("worker_processes")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" 1; #允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("events")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #单个进程最大连接数（最大连接数=连接数*进程数）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    worker_connections")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" 1024;")]),t._v("\n}\n\n\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("http")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #文件扩展名与文件类型映射表(是conf目录下的一个文件)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("      mime.types;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #默认文件类型，如果mime.types预先定义的类型没匹配上，默认使用二进制流的方式传输")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    default_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" application/octet-stream;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    sendfile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("       on;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("     #长连接超时时间，单位是秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    keepalive_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" 65;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#定义一组服务器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("upstream")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("httpds{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("192.168.8.102 weight=10;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("192.168.8.103 weight=1;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    # server 192.168.8.102 weight=10 down; #down表示不参与负载均衡")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    # server 192.168.8.102 weight=10 backup; #backup表示是备用服务器，没有服务器可用的时候使用")]),t._v("\n}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v(" #虚拟主机的配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #监听端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        listen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("      80;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #域名，可以有多个，用空格隔开")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        server_name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" test80.xzj520520.cn;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t#配置根目录以及默认页面")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("/ {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("http://httpds;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            # root   /www/test80;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            # index  index.html index.htm;")]),t._v("\n        }\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t#出错页面配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        error_page")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("  500 502 503 504  /50x.html;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #/50x.html文件所在位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("/50x.html {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            root")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("  html;")]),t._v("\n        }\n\n    }\n\n\n}\n\n")])])]),a("h2",{attrs:{id:"其他负载均衡策略-不常用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他负载均衡策略-不常用"}},[t._v("#")]),t._v(" 其他负载均衡策略（不常用）")]),t._v(" "),a("h3",{attrs:{id:"ip-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ip-hash"}},[t._v("#")]),t._v(" ip_hash")]),t._v(" "),a("p",[t._v("根据客户端的ip地址转发同一台服务器，可以保持会话，但是很少用这种方式去保持会话，例如我们当前正在使用wifi访问，当切换成手机信号访问时，会话就不保持了。")]),t._v(" "),a("h3",{attrs:{id:"least-conn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#least-conn"}},[t._v("#")]),t._v(" least_conn")]),t._v(" "),a("p",[t._v("最少连接访问，优先访问连接最少的那一台服务器，这种方式也很少使用，因为连接少，可能是由于该服务器配置较低，刚开始赋予的权重较低。")]),t._v(" "),a("h3",{attrs:{id:"url-hash-需要第三方插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-hash-需要第三方插件"}},[t._v("#")]),t._v(" url_hash（需要第三方插件）")]),t._v(" "),a("p",[t._v("根据用户访问的url定向转发请求，不同的url转发到不同的服务器进行处理（定向流量转发）。")]),t._v(" "),a("h3",{attrs:{id:"fair-需要第三方插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fair-需要第三方插件"}},[t._v("#")]),t._v(" fair（需要第三方插件）")]),t._v(" "),a("p",[t._v("根据后端服务器响应时间转发请求，这种方式也很少使用，因为容易造成流量倾斜，给某一台服务器压垮。")]),t._v(" "),a("h1",{attrs:{id:"动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),a("p",[t._v("为了提高服务器的响应速度，减轻服务器程序的负载，对于静态资源可以在反向代理服务器中进行缓存，这样浏览器在请求静态资源时，代理服务器可以直接处理掉，不用转发给被代理服务器，而其他动态资源请求则继续转发，这样就可以实现静态和动态资源分离。")]),t._v(" "),a("p",[t._v("动静分离可通过location对请求url进行匹配，将网站静态资源（HTML，JavaScript，CSS，img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问。通常将静态资源放到nginx中，动态资源转发到tomcat服务器中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("        location /images {\n            root   /www/resources;\n            index  index.html index.htm;\n        }\n        //将/images后缀的转发到/www/resources 文件夹下\n")])])]),a("h2",{attrs:{id:"使用正则配置动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则配置动静分离"}},[t._v("#")]),t._v(" 使用正则配置动静分离")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("^ ：匹配输入字符串的起始位置\n$ ：匹配输入字符串的结束位置\n* ：匹配前面的字符零次或多次。如“ol*”能匹配“o”及“ol”、“oll”\n+ ：匹配前面的字符一次或多次。如“ol+”能匹配“ol”及“oll”、“olll”，但不能匹配“o”\n? ：匹配前面的字符零次或一次，例如“do(es)?”能匹配“do”或者“does”，”?”等效于”{0,1}”\n. ：匹配除“\\n”之外的任何单个字符，若要匹配包括“\\n”在内的任意字符，请使用诸如“[.\\n]”之类的模式\n\\ ：将后面接着的字符标记为一个特殊字符或一个原义字符或一个向后引用。如“\\n”匹配一个换行符，而“\\$”则匹配“$”\n\\d ：匹配纯数字\n{n} ：重复 n 次\n{n,} ：重复 n 次或更多次\n{n,m} ：重复 n 到 m 次\n[] ：定义匹配的字符范围\n[c] ：匹配单个字符 c\n[a-z] ：匹配 a-z 小写字母的任意一个\n[a-zA-Z0-9] ：匹配所有大小写字母或数字\n() ：表达式的开始和结束位置\n| ：或运算符  //例(js|img|css)\n")])])]),a("h2",{attrs:{id:"location正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location正则"}},[t._v("#")]),t._v(" location正则：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//location大致可以分为三类\n精准匹配：location = /{}\n一般匹配：location /{}\n正则匹配：location ~/{}\n//location常用的匹配规则：\n= ：进行普通字符精确匹配，也就是完全匹配。\n^~ ：表示前缀字符串匹配（不是正则匹配，需要使用字符串），如果匹配成功，则不再匹配其它 location。\n~ ：区分大小写的匹配（需要使用正则表达式）。\n~* ：不区分大小写的匹配（需要使用正则表达式）。\n!~ ：区分大小写的匹配取非（需要使用正则表达式）。\n!~* ：不区分大小写的匹配取非（需要使用正则表达式）。\n//优先级\n首先精确匹配 =\n其次前缀匹配 ^~\n其次是按文件中顺序的正则匹配 ~或~*\n然后匹配不带任何修饰的前缀匹配\n最后是交给 / 通用匹配\n")])])]),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("ul",[a("li",[t._v("精确匹配： "),a("code",[t._v("=")]),t._v(" ， 后面的表达式中写的是纯字符串")]),t._v(" "),a("li",[t._v("字符串匹配： "),a("code",[t._v("^~")]),t._v(" 和 "),a("code",[t._v("无符号匹配")]),t._v(" ， 后面的表达式中写的是纯字符串")]),t._v(" "),a("li",[t._v("正则匹配： "),a("code",[t._v("~")]),t._v(" 和 "),a("code",[t._v("~*")]),t._v(" 和 "),a("code",[t._v("!~")]),t._v(" 和 "),a("code",[t._v("!~*")]),t._v(" ， 后面的表达式中写的是正则表达式")])]),t._v(" "),a("h2",{attrs:{id:"location的说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location的说明"}},[t._v("#")]),t._v(" location的说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" (1）location = / {}\n=为精确匹配 / ，主机名后面不能带任何字符串，比如访问 / 和 /data，则 / 匹配，/data 不匹配\n再比如 location = /abc，则只匹配/abc ，/abc/或 /abcd不匹配。若 location  /abc，则即匹配/abc 、/abcd/ 同时也匹配 /abc/。\n\n（2）location / {}\n因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 比如访问 / 和 /data, 则 / 匹配， /data 也匹配，\n但若后面是正则表达式会和最长字符串优先匹配（最长匹配）\n\n（3）location /documents/ {}\n匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（4）location /documents/abc {}\n匹配任何以 /documents/abc 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（5）location ^~ /images/ {}\n匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条\n\n（6）location ~* \\.(gif|jpg|jpeg)$ {}\n匹配所有以 gif、jpg或jpeg 结尾的请求\n然而，所有请求 /images/ 下的图片会被 location ^~ /images/ 处理，因为 ^~ 的优先级更高，所以到达不了这一条正则\n\n（7）location /images/abc {}\n最长字符匹配到 /images/abc，优先级最低，继续往下搜索其它 location，会发现 ^~ 和 ~ 存在\n\n（8）location ~ /images/abc {}\n匹配以/images/abc 开头的，优先级次之，只有去掉 location ^~ /images/ 才会采用这一条\n\n（9）location /images/abc/1.html {}\n匹配/images/abc/1.html 文件，如果和正则 ~ /images/abc/1.html 相比，正则优先级更高\n\n优先级总结：\n(location =) > (location 完整路径) > (location ^~ 路径) > (location ~,~* 正则顺序) > (location 部分起始路径) > (location /)\n")])])]),a("h2",{attrs:{id:"实际网站使用中-至少有三个匹配规则定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际网站使用中-至少有三个匹配规则定义"}},[t._v("#")]),t._v(" 实际网站使用中，至少有三个匹配规则定义:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一个必选规则")]),t._v(" "),a("p",[t._v("直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，比如说官网。这里是直接转发给后端应用服务器了，也可以是一个静态首页")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location = / {\n    proxy_pass http://127.0.0.1:8080/;\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("第二个必选规则")]),t._v(" "),a("p",[t._v("处理静态文件请求，这是nginx作为http服务器的强项,有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location ^~ /static/ {\n    root /webroot/static/;\n}\n\nlocation ~* \\.(html|gif|jpg|jpeg|png|css|js|ico)$ {\n    root /webroot/res/;\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("第三个必选规则")]),t._v(" "),a("p",[t._v("通用规则，用来转发动态请求到后端应用服务器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location /api/ {\n    proxy_pass http://127.0.0.1:3000/api/\n}\n")])])])])]),t._v(" "),a("h1",{attrs:{id:"urlrewrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#urlrewrite"}},[t._v("#")]),t._v(" URLRewrite")]),t._v(" "),a("p",[t._v("rewrite是实现URL重写的关键指令，根据regex(正则表达式)部分内容，重定向到repacement，结尾是flag标记。")]),t._v(" "),a("p",[t._v("格式：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/7406887eafac182366bca590e6c96978.png",alt:"image-20220501143255652"}})]),t._v(" "),a("h3",{attrs:{id:"urlrewrite的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#urlrewrite的优缺点"}},[t._v("#")]),t._v(" URLRewrite的优缺点")]),t._v(" "),a("p",[t._v("优点：掩藏真实的url以及url中可能暴露的参数，以及隐藏web使用的编程语言，提高安全性便于搜索引擎收录")]),t._v(" "),a("p",[t._v("缺点：降低效率，影响性能。如果项目是"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%86%85%E7%BD%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("内网"),a("OutboundLink")],1),t._v("使用，比如公司内部软件，则没有必要配置。")]),t._v(" "),a("p",[t._v("实例：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("Location/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        rewrite ^/test.html$ /index.html?testParam="),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" break;\n        proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//192.168.8.101:8680;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码")]),t._v("\nrewrite ^/test.html$ /index.html?testParam="),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" break;\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可以用正则表达式的形式：")]),t._v("\nrewrite ^/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("-9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+.html$ /index.html?testParam=$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" break; "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//$1表示第一个匹配的字符串")]),t._v("\n")])])]),a("h1",{attrs:{id:"防盗链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防盗链"}},[t._v("#")]),t._v(" 防盗链")]),t._v(" "),a("p",[t._v("盗链是指服务提供商自己不提供服务的内容，通过技术手段绕过其它有利益的最终用户界面（如广告），直接在自己的网站上向最终用户提供其它服务提供商的服务内容，骗取最终用户的浏览和点击率。受益者不提供资源或提供很少的资源，而真正的服务提供商却得不到任何的收益。")]),t._v(" "),a("h2",{attrs:{id:"nginx防盗链配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx防盗链配置"}},[t._v("#")]),t._v(" nginx防盗链配置")]),t._v(" "),a("p",[t._v("如果不想被盗链，可以对网关服务器102做如下配置：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n\n\n\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include       mime.types;\n    default_type  application/octet-stream;\n\n\n    sendfile        on;\n\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        server_name  localhost;\n\n\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//192.168.8.101:8080;")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n        location ^~/images/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            valid_referers "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.102")]),t._v(";  #valid_referers 指令，配置是否允许 referer 头部以及允许哪些 referer 访问。"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.102")]),t._v("不是ip而是域名（去掉http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前缀）")]),t._v("\n            if ($invalid_referer) "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  # 注意这里if后要加空格\n                return "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v("; ## 返回错误码\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            root   /www/resources;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"valid-referers解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valid-referers解释"}},[t._v("#")]),t._v(" valid_referers解释")]),t._v(" "),a("p",[t._v("可以同时携带多个参数，表示多个 referer 头部都生效。")]),t._v(" "),a("p",[t._v("参数值")]),t._v(" "),a("ul",[a("li",[t._v("none：允许没有 referer 信息的请求访问，即直接通过url访问。")]),t._v(" "),a("li",[t._v('blocked：请求头Referer字段不为空（即存在Referer），但是值可以为空（值被代理或者防火墙删除了），并且允许refer不以“http://”或“https://”开头，通俗点说就是允许“http://”或"https//"以外的请求。')]),t._v(" "),a("li",[t._v("erver_names：若 referer 中站点域名与 server_name 中本机域名某个匹配，则允许该请求访问")]),t._v(" "),a("li",[t._v("其他字符串类型：检测referer与字符串是否匹配，如果匹配则允许访问，可以采用通配符*")]),t._v(" "),a("li",[t._v("正则表达式：若 referer 的值匹配上了正则，就允许访问")])]),t._v(" "),a("p",[a("strong",[t._v("invalid_referer 变量")])]),t._v(" "),a("ul",[a("li",[t._v("允许访问时变量值为空")]),t._v(" "),a("li",[t._v("不允许访问时变量值为 1")])]),t._v(" "),a("p",[t._v("例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server {\n    server_name referer.test.com;\n    listen 80;\n\n    error_log logs/myerror.log debug;\n    root html;\n    location / {\n        valid_referers none server_names\n                       *.test.com www.test.org.cn/nginx/;\n        if ($invalid_referer) {\n                return 403; # 返回错误码\n        }\n        return 200 'valid\\n';\n    }\n}\n\n# none：表示没有 referer 的可以访问\n# server_names：表示本机 server_name 也就是 referer.test.com 可以访问\n# *.test.com：匹配上了正则的可以访问\n# www.test.org.cn/nginx/：该页面发起的请求可以访问\n")])])]),a("h2",{attrs:{id:"配置错误提示页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置错误提示页面"}},[t._v("#")]),t._v(" 配置错误提示页面")]),t._v(" "),a("h4",{attrs:{id:"返回错误页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回错误页面"}},[t._v("#")]),t._v(" 返回错误页面")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在nginx的html目录中添加403.html")])]),t._v(" "),a("li",[a("p",[t._v("修改nginx.conf")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("worker_processes  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(";\n\n\n\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    worker_connections  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(";\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include       mime.types;\n    default_type  application/octet-stream;\n\n\n\n    sendfile        on;\n\n    keepalive_timeout  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(";\n\n\n\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(";\n        server_name  localhost;\n\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//192.168.8.101:8080;")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n        location ^~/images/ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            valid_referers "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v("."),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.102")]),t._v(" baidu.com;\n            if ($invalid_referer) "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                return "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v("; # 返回错误码\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            root   /www/resources;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v("  /"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v(".html;\n        location = /"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v(".html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        error_page   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html;\n        location = /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"返回出错图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回出错图片"}},[t._v("#")]),t._v(" 返回出错图片")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/12399be39ef7bd88b9d162bc440df75a.png",alt:"image-20220501181602775"}})]),t._v(" "),a("h1",{attrs:{id:"高可用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用配置"}},[t._v("#")]),t._v(" 高可用配置")]),t._v(" "),a("h3",{attrs:{id:"高可用场景及解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用场景及解决方案"}},[t._v("#")]),t._v(" 高可用场景及解决方案")]),t._v(" "),a("p",[t._v("Keepalived软件起初是专为LVS负载均衡软件设计的，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能。因此，Keepalived除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件。VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。所以，Keepalived 一方面具有配置管理LVS的功能，同时还具有对LVS下面节点进行健康检查的功能，另一方面也可实现系统网络服务的高可用功能。")]),t._v(" "),a("p",[t._v("keepalived官网"),a("a",{attrs:{href:"http://www.keepalived.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.keepalived.org"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("keepalived服务的三个重要功能：")]),t._v(" "),a("ul",[a("li",[t._v("管理LVS负载均衡软件")]),t._v(" "),a("li",[t._v("实现LVS集群节点的健康检查中")]),t._v(" "),a("li",[t._v("作为系统网络服务的高可用性（failover）")])]),t._v(" "),a("h3",{attrs:{id:"安装keepalived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装keepalived"}},[t._v("#")]),t._v(" 安装keepalived")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" yum install -y keepalived\n")])])]),a("p",[t._v("成功截图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/e07cd9f9164d4c7fb452a6f6d47b2ee7.png",alt:"afdas"}})]),t._v(" "),a("h3",{attrs:{id:"keepalived实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keepalived实战"}},[t._v("#")]),t._v(" keepalived实战")]),t._v(" "),a("p",[t._v("keepalived的配置文件在如下位置： /etc/keepalived")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("主Nginx 配置 keepalived.conf")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("! Configuration File for keepalived\n\nglobal_defs {\n   router_id LB_102\n}\n\nvrrp_instance VI_102 {\n    state MASTER\n    interface ens33\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.8.200\n    }\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("备用机 配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("! Configuration File for keepalived\n\nglobal_defs {\n   router_id LB_101\n}\n\nvrrp_instance VI_102 {\n    state BACKUP\n    interface ens33\n    virtual_router_id 51\n    priority 50\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.8.200\n    }\n}\n")])])]),a("blockquote",[a("p",[t._v("interface ens33这里的ens33需要和以下位置对应:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/de70295e96ff2cf132e55c46f26385d9.png",alt:"image-20220501201254706"}})])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);