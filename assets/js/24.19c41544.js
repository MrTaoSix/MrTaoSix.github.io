(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{508:function(e,a,t){"use strict";t.r(a);var s=t(29),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("#docker 学习笔记\n##1. 安装\n###linux 安装")]),e._v(" "),t("ul",[t("li",[e._v("添加yum")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install epel-release –y\nyum clean all\nyum list\n")])])]),t("ul",[t("li",[e._v("安装并运行Docker")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install docker-io –y\nsystemctl start docker\n")])])]),t("ul",[t("li",[e._v("检查安装结果")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker info\n")])])]),t("p",[e._v("###"),t("strong",[e._v("使用Docker")]),e._v("\n1.管理Docker守护进程。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("systemctl start docker     #运行Docker守护进程\nsystemctl stop docker      #停止Docker守护进程\nsystemctl restart docker   #重启Docker守护进程\n")])])]),t("p",[e._v("2.管理镜像。本文使用的是来自阿里云仓库的Apache镜像。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker pull registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5\n")])])]),t("ul",[t("li",[e._v("修改标签。由于阿里云仓库镜像的镜像名称很长，可以修改镜像标签以便记忆区分。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker tag registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5:latest aliweb:v1\n")])])]),t("ul",[t("li",[e._v("查看已有镜像。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker images\n")])])]),t("ul",[t("li",[e._v("强制删除镜像。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker rmi –f registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5\n")])])]),t("p",[e._v("3.管理容器。")]),e._v(" "),t("ul",[t("li",[e._v("进入容器。e1xxxxxxxxxe是执行docker images命令查询到的ImageId，使用docker run命令启动容器。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker run –it e1xxxxxxxxxe /bin/bash\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker run -d --name apache e1xxxxxxxxxe\n")])])]),t("ul",[t("li",[e._v("进入后台运行的容器。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker exec -it apache /bin/bash\n")])])]),t("ul",[t("li",[e._v("将容器做成镜像，命令的参数说明：docker commit <容器ID或容器名> [<仓库名>[:<标签>]]。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker commit containerID/containerName repository:tag\n")])])]),t("ul",[t("li",[e._v("为了方便测试和恢复，将源镜像运行起来后，再做一个命名简单的镜像做测试。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker commit 4c8066cd8c01 apachephp:v1\n")])])]),t("ul",[t("li",[e._v("运行容器并将宿主机的8080端口映射到容器里去。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    docker run -d -p 8080:80 apachephp:v1\n    在浏览器输入宿主机IP加8080端口访问测试!\n")])])]),t("p",[e._v("##概念##")]),e._v(" "),t("ul",[t("li",[e._v("Docker 镜像 images\n容器运行时的只读模板，操作系统+软件运行环境+用户程序\n可比喻为Java程序中的Class")]),e._v(" "),t("li",[e._v("Docker 容器 containers\n容器包含某个应用程序运行所需要的全部环境\n科比与为Java程序中通过class New出来的对象")]),e._v(" "),t("li",[e._v("Dcoker 仓库 registeries\n用来保存镜像，有共有和私有仓库。\n类似maven中的仓库。")])]),e._v(" "),t("p",[e._v("##Docker容器常见命令\n"),t("em",[e._v("简介：列出Docker在linux下的常用命令安装完Docker之后的命令都是Docker开头，可使用 "),t("kbd",[e._v("docker --help")]),e._v("查看所有指令")])]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("搜索镜像：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker search imageName\n")])])]),t("ul",[t("li",[e._v("搜索RabbitMQ   docker search rabbitmq:management")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[e._v("拉取镜像:")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker pull REPOSITORY:TAG\n")])])]),t("ul",[t("li",[e._v("REPOSITORY : 镜像名称")]),e._v(" "),t("li",[e._v("TAG: 镜像的标签")]),e._v(" "),t("li",[e._v("示例：docker pull rabbitmq:management")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[e._v("列出当前系统存在的镜像")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker images\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[t("strong",[e._v("运行一个容器")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run -d -p 5672:5672 -p 15672:15672 rabbitmq:management\n")])])]),t("ul",[t("li",[e._v("docker run : 运行一个容器")]),e._v(" "),t("li",[e._v("-d         : 后台运行")]),e._v(" "),t("li",[e._v("-p         :端口映射 可映射多个端口")]),e._v(" "),t("li",[e._v("rabbitqm:meangement : (格式 REPOSITORY：TAG),如果不指定tag，默认使用最新的")]),e._v(" "),t("li",[e._v("--name     : 设置别名 后可通过这个别名操作")]),e._v(" "),t("li",[e._v("-i:交互式操作")]),e._v(" "),t("li",[e._v("-t:终端")]),e._v(" "),t("li",[e._v("-v:挂在数据目录")]),e._v(" "),t("li",[e._v("退出容器。使用exit命令退出当前容器。")]),e._v(" "),t("li",[e._v("--link 连接")])]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("strong",[e._v("查看在运行的容器")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker ps\n")])])]),t("p",[e._v("5.1 "),t("strong",[e._v("查看正在运行的容器")])]),e._v(" "),t("ul",[t("li",[e._v("docker attach  退出会停止容器 不推荐")]),e._v(" "),t("li",[e._v("docker exec：推荐大家使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。")])]),e._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[t("strong",[e._v("检查容器内部信息")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker inspect 容器名称\n")])])]),t("ol",{attrs:{start:"7"}},[t("li",[t("strong",[e._v("容器 指令")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("停止： docker stop 容器名称\n启动： docker start 容器名称\n移除： docker rm    容器名称\n")])])]),t("ol",{attrs:{start:"8"}},[t("li",[t("strong",[e._v("删除某个镜像")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker rmi IMAGE_NAME\n")])])]),t("ul",[t("li",[e._v("强制移除镜像不管是否有容器是否在运行 增加 -f")])]),e._v(" "),t("p",[e._v("##spring boot 和Docker整合部署")]),e._v(" "),t("p",[e._v("简介:使用Docker的maven插件，构建springboot应用\n官方文档："),t("a",{attrs:{href:"https://spring.io/guides/gs/spring-boot-docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://spring.io/guides/gs/spring-boot-docker"),t("OutboundLink")],1)]),e._v(" "),t("ol",[t("li",[e._v("**步骤：maven里面添加配置pom.xml **")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        <properties>\n           <docker.image.prefix>镜像前缀</docker.image.prefix>\n        </properties>\n\n        <build>\n            <finalName>产出物名称</finalName>\n            <plugins>\n                <plugin>\n                    <groupId>com.spotify</groupId>\n                    <artifactId>dockerfile-maven-plugin</artifactId>\n                    <version>1.3.6</version>\n                    <configuration>\n                        <repository>${docker.image.prefix}/${project.artifactId}</repository>\n                        <buildArgs>\n                            <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>\n                        </buildArgs>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </build>\n")])])]),t("ul",[t("li",[e._v("Spotify 的 docker-maven-plugin 插件是用maven插件方式构建docker镜像的。")]),e._v(" "),t("li",[e._v("${project.build.finalName} 产出物名称。")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[e._v("创建Dockerfile,默认是根目录")]),e._v("，（可以修改为src/main/docker/Dockerfile,如果修则需要制定路径）\n什么是Dockerfile : 由一系列命令和参数构成的脚本，这些命令应用于基础镜像, 最终创建一个新的镜像")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM openjdk:8-jdk-alpine\nVOLUME /tmp\nARG JAR_FILE\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT ["java","-jar","/app.jar"]\n')])])]),t("p",[e._v("参数说明：")]),e._v(" "),t("ul",[t("li",[e._v("FROM 需要一个基础镜像，可以是公共的或者是私有的， 后续构建会基于此镜像，如果同一个Dockerfile中建立多个镜像时，可以使用多个FROM指令，这里程序运行需要jdk 所以需要配置jdk8 自动从仓库获取")]),e._v(" "),t("li",[e._v("VOLUME  配置一个具有持久化功能的目录，主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录")]),e._v(" "),t("li",[e._v("ARG  设置编译镜像时加入的参数， ENV 是设置容器的环境变量")]),e._v(" "),t("li",[e._v("COPY : 只支持将本地文件复制到容器 ,还有个ADD更强大但复杂点")]),e._v(" "),t("li",[e._v("ENTRYPOINT 容器启动时执行的命令")]),e._v(" "),t("li",[e._v("EXPOSE 8080 暴露镜像端口")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("strong",[e._v("构建镜像")]),e._v("\n在终端运行命令")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mvn install dockerfile:build\n")])])]),t("p",[e._v("##操作私人仓库")]),e._v(" "),t("ol",[t("li",[e._v("登录阿里云Docker Registry")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker login --username=tb2265570_2012 registry.cn-hangzhou.aliyuncs.com\n")])])]),t("p",[e._v("用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。")]),e._v(" "),t("p",[e._v("您可以在访问凭证页面修改凭证密码。\n2. 从Registry中拉取镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/mrtao/mrtao:[镜像版本号]\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("将镜像推送到Registry")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo docker login --username=tb2265570_2012 registry.cn-hangzhou.aliyuncs.com\n$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mrtao/mrtao:[镜像版本号]\n$ sudo docker push registry.cn-hangzhou.aliyuncs.com/mrtao/mrtao:[镜像版本号]\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("查看日志")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker logs -f  containerid\n")])])]),t("p",[e._v("##安装 jhipster-registry")]),e._v(" "),t("p",[e._v("1.**创建 jhipster-registry.yml 文件 **")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('version: \'2\'\nservices:\n    jhipster-registry:\n        image: jhipster/jhipster-registry:v4.1.1\n        volumes:\n            - ./central-server-config:/central-config\n        # When run with the "dev" Spring profile, the JHipster Registry will\n        # read the config from the local filesystem (central-server-config directory)\n        # When run with the "prod" Spring profile, it will read the configuration from a Git repository\n        # See https://www.jhipster.tech/microservices-architecture/#registry_app_configuration\n        environment:\n            - _JAVA_OPTIONS=-Xmx512m -Xms256m\n            - SPRING_PROFILES_ACTIVE=dev,swagger\n            - SPRING_SECURITY_USER_PASSWORD=brc1234\n            - JHIPSTER_REGISTRY_PASSWORD=admin\n            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=native\n            - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS=file:./central-config/localhost-config/\n            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE=git\n            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_URI=https://github.com/jhipster/jhipster-registry/\n            # - SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_PATHS=central-config\n        ports:\n            - 8761:8761\n\n')])])]),t("ul",[t("li",[e._v("在当前目录执行 docker-compose -f jhipster-registry.yml up -d")])]),e._v(" "),t("p",[e._v("##docker--redis")]),e._v(" "),t("p",[e._v("1."),t("strong",[e._v("拉取redis镜像")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("liutaodeMacBook-Pro:redis mrtao$ docker pull redis\nWARNING: Error loading config file: /Users/mrtao/.docker/config.json: EOF\nUsing default tag: latest\nlatest: Pulling from library/redis\n68ced04f60ab: Pull complete\n7ecc253967df: Pull complete\n765957bf98d4: Pull complete\n91fff01e8fef: Pull complete\n76feb725b7e3: Pull complete\n75797de34ea7: Pull complete\nDigest: sha256:ddf831632db1a51716aa9c2e9b6a52f5035fc6fa98a8a6708f6e83033a49508d\nStatus: Downloaded newer image for redis:latest\ndocker.io/library/redis:latest\n")])])]),t("ul",[t("li",[e._v("不加版本号默认最新版本，可以使用docker search redis 搜索然后下载指定的版本")])]),e._v(" "),t("p",[e._v("2."),t("strong",[e._v("查看本地镜像")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("liutaodeMacBook-Pro:redis mrtao$ docker images\nWARNING: Error loading config file: /Users/mrtao/.docker/config.json: EOF\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nredis                        latest              f0453552d7f2        4 days ago          98.2MB\n")])])]),t("p",[e._v("3."),t("strong",[e._v("从官网获取 redis.conf 配置文件")])]),e._v(" "),t("blockquote",[t("p",[e._v("修改默认配置文件")]),e._v(" "),t("ul",[t("li",[e._v("bind 127.0.0.1 #注释掉这部分，这是限制redis只能本地访问\nprotected-mode no #默认yes，开启保护模式，限制为本地访问")]),e._v(" "),t("li",[e._v("daemonize no#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程（可选），改为yes会使配置文件方式启动redis失败")]),e._v(" "),t("li",[e._v("dir  ./ #输入本地redis数据库存放文件夹（可选）")]),e._v(" "),t("li",[e._v("appendonly yes #redis持久化（可选）")])])]),e._v(" "),t("p",[e._v("4."),t("strong",[e._v("docker 启动 redis 命令")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run -p 6379:6379 --name redis -v /docker/redis/redis.conf:/etc/redis.conf -v /docker/redis/data:/data -d redis redis-server /etc/redis.conf --appendonly yes\n")])])]),t("p",[t("strong",[e._v("命令解释说明：")])]),e._v(" "),t("ul",[t("li",[e._v("-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。")]),e._v(" "),t("li",[e._v("--name myredis  指定该容器名称，查看和进行操作都比较方便。")]),e._v(" "),t("li",[e._v("-v 挂载目录，规则与端口映射相同。")]),e._v(" "),t("li",[e._v("-d redis 表示后台启动redis")]),e._v(" "),t("li",[e._v("redis-server /etc/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/docker/redis/redis.conf")]),e._v(" "),t("li",[e._v("appendonly yes 开启redis 持久化")])]),e._v(" "),t("p",[e._v("5."),t("strong",[e._v("使用docker ps 查看redis已经运行了")])]),e._v(" "),t("p",[e._v("6."),t("strong",[e._v("使用 docker exec -it redis /bin/bash进入redis")])]),e._v(" "),t("p",[e._v("7."),t("strong",[e._v("使用 redis-cli 可以测试连接")])])])}),[],!1,null,null,null);a.default=r.exports}}]);