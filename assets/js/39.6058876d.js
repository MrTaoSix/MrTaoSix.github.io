(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{503:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("x")]),t._v(" "),a("h1",{attrs:{id:"java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),a("h2",{attrs:{id:"_1-jdk和jre的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-jdk和jre的区别"}},[t._v("#")]),t._v(" 1.JDK和JRE的区别")]),t._v(" "),a("ul",[a("li",[t._v("JRE : 运行时环境，指的是Java运行时需要的环境。主要是面对用户端（Java Runtime environment）")]),t._v(" "),a("li",[t._v("JDK: JDK包含JRE, Java Development Kit 简单的说就是面向开发人员使用的SDK,提供Java的开发环境和运行环境。主要包含三个部分：\n"),a("ul",[a("li",[t._v("JVM：Java运行时环境。")]),t._v(" "),a("li",[t._v("基础内库，")]),t._v(" "),a("li",[t._v("Java开发工具和基础类库")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-和-equals-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-和-equals-的区别是什么"}},[t._v("#")]),t._v(" 2.== 和 equals 的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("==: 比较运算符，如果两个操作数是数值类型的话比较的是值，如果是引用类型的话比较的是内存地址")]),t._v(" "),a("li",[t._v("equals: 底层同样是用的是==，不过有些继承类对该方法进行了重写，比如String类。")])]),t._v(" "),a("h2",{attrs:{id:"_3-两个对象的-hashcode-相同-则-equals-也一定为-true-对吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-两个对象的-hashcode-相同-则-equals-也一定为-true-对吗"}},[t._v("#")]),t._v(" 3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？")]),t._v(" "),a("p",[t._v("不一定，HashCode返回的是哈希吗值。equals比较的是两个对象是否相等，如果相等的话，hashCode一定相等，反之不一定，因为在重写equals方法的时候有标注，必须同时重写hashCode方法，来保证hashCode的常规协定，比如HashSet中比较是否重复，会一次比较HashCode和equasl方法，如果只重写了equals，那么hashCode继承了Object的方法，是取得内存编码，出现hashCode不同。")]),t._v(" "),a("h2",{attrs:{id:"_4-final-在-java-中有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-final-在-java-中有什么作用"}},[t._v("#")]),t._v(" 4.final 在 java 中有什么作用？")]),t._v(" "),a("p",[t._v("final是Java的关键字，可以用在三个地方，类，方法，变量")]),t._v(" "),a("ul",[a("li",[t._v("类：被修饰的类不能被继承")]),t._v(" "),a("li",[t._v("方法：被修饰的方法不能被重写")]),t._v(" "),a("li",[t._v("变量：只能一次赋值不能修改，如果是引用对象的话，引用地址不能改变，但是引用对象的信息是可以改变的")])]),t._v(" "),a("h2",{attrs:{id:"_5-java-中的-math-round-1-5-等于多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-java-中的-math-round-1-5-等于多少"}},[t._v("#")]),t._v(" 5.Java 中的 Math.round(-1.5) 等于多少？")]),t._v(" "),a("p",[t._v("答案是：-1 ，round是一个四舍五入的方法，可以传入一个dou b le的值，加上0.5 然后向下取整，-1.5+0.5 = -1")]),t._v(" "),a("h2",{attrs:{id:"_6-string-属于基础的数据类型吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-string-属于基础的数据类型吗"}},[t._v("#")]),t._v(" 6.String 属于基础的数据类型吗？")]),t._v(" "),a("p",[t._v("不属于基础类型，基础类型如下：")]),t._v(" "),a("ul",[a("li",[t._v("整型：byte shrt int long")]),t._v(" "),a("li",[t._v("浮点型：double float")]),t._v(" "),a("li",[t._v("字符：char")]),t._v(" "),a("li",[t._v("布尔：boolean")])]),t._v(" "),a("h2",{attrs:{id:"_7-java-中操作字符串都有哪些类-它们之间有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-java-中操作字符串都有哪些类-它们之间有什么区别"}},[t._v("#")]),t._v(" 7. java 中操作字符串都有哪些类？它们之间有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("String : 类型不可变，对字符的操作其实是新创建一个对象")]),t._v(" "),a("li",[t._v("String builder :不会新建对象，不是线程安全的，性能好一点")]),t._v(" "),a("li",[t._v("String buffer : 不会新建对象，每个方法都s y n chronized修饰 线程安全，性能差一点。")])]),t._v(" "),a("h2",{attrs:{id:"_8-string-str-i-与-string-str-new-string-i-一样吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-string-str-i-与-string-str-new-string-i-一样吗"}},[t._v("#")]),t._v(' 8. String str="i"与 String str=new String(“i”)一样吗？')]),t._v(" "),a("p",[t._v("不一样，第一个属于赋值操作，相当于把I的内存地址给到str ,String是final修饰的。所以I应该在常量池中，第二个是新建对象在复制，所以这个I在堆内存中。")]),t._v(" "),a("h2",{attrs:{id:"_9-如何将字符串反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何将字符串反转"}},[t._v("#")]),t._v(" 9. 如何将字符串反转？")]),t._v(" "),a("p",[t._v("StringBuilder(线程不安全)的Reverse方法反转字符串")]),t._v(" "),a("h2",{attrs:{id:"_10-string-类的常用方法都有那些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-string-类的常用方法都有那些"}},[t._v("#")]),t._v(" 10.String 类的常用方法都有那些？")]),t._v(" "),a("ul",[a("li",[t._v("subString 截取")])]),t._v(" "),a("ul",[a("li",[t._v("indexOf 获取指定位置字符")]),t._v(" "),a("li",[t._v("laseIndexOf 从后获取")]),t._v(" "),a("li",[t._v("TolowerCase 变小写")]),t._v(" "),a("li",[t._v("ToUpperCase 变大写")]),t._v(" "),a("li",[t._v("trim   去空格")]),t._v(" "),a("li",[t._v("replase 替换")]),t._v(" "),a("li",[t._v("split  切割")]),t._v(" "),a("li",[t._v("length 长度")]),t._v(" "),a("li",[t._v("equals 比较")])]),t._v(" "),a("h2",{attrs:{id:"_11-抽象类必须要有抽象方法吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-抽象类必须要有抽象方法吗"}},[t._v("#")]),t._v(" 11. 抽象类必须要有抽象方法吗？")]),t._v(" "),a("p",[t._v("不是必须的， 抽象方法必须是抽象类")]),t._v(" "),a("h2",{attrs:{id:"_12-普通类和抽象类有哪些区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-普通类和抽象类有哪些区别"}},[t._v("#")]),t._v(" 12.普通类和抽象类有哪些区别？")]),t._v(" "),a("ul",[a("li",[t._v("抽象类用abstract修饰")]),t._v(" "),a("li",[t._v("抽象方法不能有主题")]),t._v(" "),a("li",[t._v("子类必须实现抽象方法，除非是抽象类")]),t._v(" "),a("li",[t._v("不能实例话")]),t._v(" "),a("li",[t._v("不能用private final static 修饰")])]),t._v(" "),a("h2",{attrs:{id:"_13-抽象类能使用-final-修饰吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-抽象类能使用-final-修饰吗"}},[t._v("#")]),t._v(" 13.抽象类能使用 final 修饰吗？")]),t._v(" "),a("p",[t._v("不能 不能 不能")]),t._v(" "),a("h2",{attrs:{id:"_14-接口和抽象类有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-接口和抽象类有什么区别"}},[t._v("#")]),t._v(" 14.接口和抽象类有什么区别？")]),t._v(" "),a("p",[t._v("接口和抽象类的作用不同")]),t._v(" "),a("p",[t._v("接口是一种能力，")]),t._v(" "),a("ul",[a("li",[t._v("接口不能有构造函数")]),t._v(" "),a("li",[t._v("接口不能有变量，只有静态常量")]),t._v(" "),a("li",[t._v("接口只有方法的声明")]),t._v(" "),a("li",[t._v("一个类可以实现多个接口，")])]),t._v(" "),a("p",[t._v("抽象类是不能使用New实例话的类，将抽象和实现分离，")]),t._v(" "),a("ul",[a("li",[t._v("可以有构造方法")]),t._v(" "),a("li",[t._v("可以有变量")]),t._v(" "),a("li",[t._v("可以有普通方法")]),t._v(" "),a("li",[t._v("可以有静态方法")]),t._v(" "),a("li",[t._v("一个类只能继承一个抽象类")])]),t._v(" "),a("h2",{attrs:{id:"_15-java-中-io-流分为几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-java-中-io-流分为几种"}},[t._v("#")]),t._v(" 15. java 中 IO 流分为几种？")]),t._v(" "),a("p",[t._v("如果按照流向分的话：程序内存作为参照物")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("输入流：inputStream，常用FileInputStream")])]),t._v(" "),a("li",[a("ul",[a("li",[a("p",[t._v("构造方法： (File),(fileName),")])]),t._v(" "),a("li",[a("p",[t._v("常用方法 read():从输入流中读取一个字节，到文件末尾，返回-1，")])]),t._v(" "),a("li",[a("p",[t._v("read(byte[]),读取一个数组长度的内容，末尾返回-1")]),t._v(" "),a("blockquote",[a("p",[t._v("数组称为缓冲区数组，大小一般是1024的倍数")])])])])]),t._v(" "),a("li",[a("p",[t._v("输出流：outputStream,所有输出流的超类")])]),t._v(" "),a("li",[a("ul",[a("li",[a("p",[t._v("构造方法：FileOutputStream(File)|(name)")])]),t._v(" "),a("li",[a("blockquote",[a("p",[t._v("如果父目录不存在会报fileNotFoundException,存在，创建一个文件，文件存在则覆盖")])])]),t._v(" "),a("li",[a("p",[t._v("（File file,boolean flag）设置为true 就是末尾写入 不覆盖")])]),t._v(" "),a("li",[a("p",[t._v("write:写入一个字节")])]),t._v(" "),a("li",[a("p",[t._v("write(byte[]):写入一个字节数组")])]),t._v(" "),a("li",[a("p",[t._v("w rite(byte[],offset len),带偏移量的插入")])])])])]),t._v(" "),a("p",[t._v("按照操作单元划分：")]),t._v(" "),a("ul",[a("li",[t._v("写入流：write")]),t._v(" "),a("li",[t._v("读取流：Reader")]),t._v(" "),a("li",[t._v("BufferedInput|BufferedOutputStream:带缓冲区的字节流；读写文件的速度快")])]),t._v(" "),a("h2",{attrs:{id:"_16-bio、nio、aio-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-bio、nio、aio-有什么区别"}},[t._v("#")]),t._v(" 16.BIO、NIO、AIO 有什么区别？")]),t._v(" "),a("h3",{attrs:{id:"bio-阻塞io-伪异步io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bio-阻塞io-伪异步io"}},[t._v("#")]),t._v(" BIO 阻塞IO&&伪异步IO")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("BIO（Blocking I/O） 同步阻塞IO 一个连接一个线程 开销较大 适合连接比较少的")]),t._v(" "),a("p",[t._v("采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的链接，一般是一个while(true)循环调用accept()方法等待接受客户端的链接的方式监听请求。如果是单线程，后面的请求就会等待，多线程的话就是一个请求一个线程。主要是socket.accept(),read(),write(),都是同步阻塞的。如果一个接受线程创建了 但是什么事情都不做就会造成不必要的线程开销。不过可以通过线程池来做一个伪异步模型，线程池可以让线程的回收成本比较低，使用FixedT h re a d P ool可以有效的控制线程的数量，保证系统资源的有限控制。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("伪异步 I/O:通过线程池FixedThreadPool来控制线程池的大小，实现客户端M,线程池最大线程数N,M可以远大于N.可以设置线程最大数来防止线程海量并发")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190422121019666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM4MTA5MDQ2,size_16,color_FFFFFF,t_70",alt:"img"}})])]),t._v(" "),a("li",[a("blockquote",[a("p",[t._v("当有新的客户端接入的时候，将客户端的Socket封装成一个Task,(实现Runnable接口)，投递到线程池中进行处理。JDK维护一个线程池，对消息队列中的任务进行处理，线程池可以设置队列的大小和最大线程数。实现资源可控。")])]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("p",[t._v("客户端Client:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOClient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" finalI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Socket")]),t._v(" socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    while (true){")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOutputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"任务："')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" finalI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        Thread.sleep(3000);")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                            socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    }")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnknownHostException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Service 服务端")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOServer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开启一个服务端 监听3333端口")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerSocket")]),t._v(" serverSocket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//伪异步处理方式")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" poolExecutor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环不断获取新的链接")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Socket")]),t._v(" socket "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" serverSocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//封装成任务")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOTask")]),t._v(" nioTask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            nioTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" activeCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" poolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActiveCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//单线线程数")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" taskCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" poolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaskCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当先任务数")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" poolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"添加了一个新任务 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", 线程数="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" activeCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", 任务数="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" taskCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", 队列="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            poolExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nioTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BIO处理模式 单线程只能阻塞处理")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        new Thread(() ->{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//          while (true){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                try {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    //接受一个链接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    Socket socket = serverSocket.accept();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("////                    new Thread(()->{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        int len;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        byte [] data = new byte[1024];")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        try {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                            InputStream inputStream = socket.getInputStream();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                            while ((len=inputStream.read(data))!= -1){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                                System.out.println(new String(data ,0,len));")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                            }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        } catch (IOException e) {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                            e.printStackTrace();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                        Thread.sleep(2000);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("////                    }).start();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                }catch (Exception e){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                    e.printStackTrace();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//            }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        }).start();")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOTask")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NIOTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inputStream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"执行完成：  "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                inputStream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("服务端包含普通阻塞接受和伪异步两种方式")]),t._v(" "),a("p",[t._v("但是面对十万百万的链接的时候还是无能为力的 这个时候需要创新。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"nio-同步非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nio-同步非阻塞"}},[t._v("#")]),t._v(" NIO 同步非阻塞")]),t._v(" "),a("p",[t._v("NIO（New I/O）（Non blocking）:同步非阻塞。Jdk 1.4引入，对应的是java.nio的包。提供了channel ,selector,buffer等抽象，同样提供传统的socker,ServerSocker相对应地SockerSchannel和SockerServerChannel。两种不同的套接字通道实现。支持阻塞和非阻塞。对于低负载和低并发可以使用阻塞，对于高负载和高并发可以用非阻塞的模式")]),t._v(" "),a("blockquote",[a("p",[t._v("NIO 和IO ：NIO是非阻塞的，比如说单线程从通道读取到数据到Buffer,同时可以继续做其他的事情，当数据读取到Buffer之后，线程继续处理数据，")]),t._v(" "),a("p",[t._v("IO流是阻塞的，就是说当一个线程调用read()，write()的时候，该线程被阻塞，直到数据被读取完成或者写入完成。此期间线程干不了其他任何事情")])]),t._v(" "),a("h4",{attrs:{id:"buffer-缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-缓冲区"}},[t._v("#")]),t._v(" Buffer（缓冲区）")]),t._v(" "),a("p",[t._v("IO 面向流（stream oriented）,NIO 面向缓冲区（Buffer oriented）")]),t._v(" "),a("p",[t._v("Buffer是一个对象，包含一些要写入或者要写出的数据。IO是直接将数据读到s t re a d中，虽然IO也有buffer的扩展类，单只是流的封装。而NIO是直接读到Buffer中进行操作。不管是读还是写都是通过buffer来操作的，最常用的ByteBuffer,ByteBuffer提供了一组功能用于操作Byte[].还有其他的，八大类型除来bo o le an都有对应的缓冲区")]),t._v(" "),a("h4",{attrs:{id:"channel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel"}},[t._v("#")]),t._v(" Channel")]),t._v(" "),a("p",[t._v("NIO的读写都是都是通过Channel来进行的。可读可写，通道是双向的。通道只能Buffer交互。可以异步读写")]),t._v(" "),a("h4",{attrs:{id:"selectors-选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selectors-选择器"}},[t._v("#")]),t._v(" Selectors(选择器)")]),t._v(" "),a("p",[t._v("选择器用于处理客户端请求和轮训是否有数据刻度，一般创建连个Selectors对象，一个用于接受新的链接并注册到另一个对象上去，另一个负责轮训是否有数据可读")]),t._v(" "),a("h3",{attrs:{id:"aio-asynchronous"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aio-asynchronous"}},[t._v("#")]),t._v(" AIO(Asynchronous)")]),t._v(" "),a("p",[t._v("异步非阻塞IO,jdk7引入的。是基于事件和回调机制实现的，操作之后直接返回，不阻塞，后台处理完成，操作系统会通知线程处理。")]),t._v(" "),a("p",[t._v("通知是异步的，IO的过程还是同步的，业务线程是在IO操作准备好的时候接收到了通知，然后由这个线程去完成IO操作。")]),t._v(" "),a("h3",{attrs:{id:"io复用模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io复用模型"}},[t._v("#")]),t._v(" IO复用模型")]),t._v(" "),a("p",[t._v("使用Select（）函数，多个IO注册到一个select上，select会监听所有注册号的IO")]),t._v(" "),a("h3",{attrs:{id:"信号驱动io模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号驱动io模型"}},[t._v("#")]),t._v(" 信号驱动IO模型")]),t._v(" "),a("p",[t._v("如果某个Socket的某个时间发生，业务线程收到信号处理")]),t._v(" "),a("h2",{attrs:{id:"_17-files的常用方法都有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-files的常用方法都有哪些"}},[t._v("#")]),t._v(" 17. Files的常用方法都有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("Files.exists() 文件是否存在")]),t._v(" "),a("li",[t._v("Files.createFile() 创建文件")]),t._v(" "),a("li",[t._v("Files.createDirectory()  创建文件夹")]),t._v(" "),a("li",[t._v("Files.move() 移动")]),t._v(" "),a("li",[t._v("Files.copy() 复制")]),t._v(" "),a("li",[t._v("Files.size() 查看文件个数")]),t._v(" "),a("li",[t._v("Files.write() 写")]),t._v(" "),a("li",[t._v("Files.read() 读")])]),t._v(" "),a("h2",{attrs:{id:"_18-java-容器都有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-java-容器都有哪些"}},[t._v("#")]),t._v(" 18. java 容器都有哪些？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("String：1.8之前使用char数组，之后使用byte数组，当读是integer.max_value    2的32次方-1")])]),t._v(" "),a("li",[a("p",[t._v("数组")]),t._v(" "),a("p",[t._v("Java.Util.*  集合。Collection 接口")])])]),t._v(" "),a("h3",{attrs:{id:"map-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-接口"}},[t._v("#")]),t._v(" Map (接口)")]),t._v(" "),a("blockquote",[a("p",[t._v("Map 不是Collectoin的字接口或者实现类，而是一个接口。用与保存有映射关系的的数据，每个Entry都持有键-值连个对象，值可以重复，键不能允许重复。只能有一个key为空")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("HashMap (类)")])]),t._v(" "),a("p",[t._v("常用映射集合，不能保证元素的顺序。通过hashCode来存放和比较对象。底层是一个Entry数组（，每一个Entry包含一个键值对。采用hash算法来存放元素，hash冲突的时候采用链地址法，也就是数组加链表的方式。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[t._v("Entry(静态内部类)： 存的是两个对象的映射关系。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哈希值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//键")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//存储的下一个Entry的引用。单链表结构")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("底层使用Entry数组来存储")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("如果出现Hash冲突的情况下会在这个hash槽的位置使用链表来存储，新的在链尾。查找值的时候如果存在链表则使用key对象的equals（）方法进行比较")])]),t._v(" "),a("li",[a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20181102221702492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvc2hpbWF4aWFvMQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])]),t._v(" "),a("li",[a("p",[t._v("几个重要字段")]),t._v(" "),a("ul",[a("li",[t._v("tansient int size: 实际存储的对象的个数")]),t._v(" "),a("li",[t._v("Int threshold : 阈值，初始16，当填充到capacity"),a("em",[t._v("loadFactory,当前最大容量")]),t._v("0.75")]),t._v(" "),a("li",[t._v("loadFactor :负载因子，代表填充度，默认0.75.，初始桶的大小为16，当放到四分之三的时候会翻倍扩容")]),t._v(" "),a("li",[t._v("modCount: 修改次数。由于线程安全问题，在对HashMap进行迭代的时候，如果期间其他线程参与进来导致结构发生变化就会抛出 ConcurrentModification异常。")])])]),t._v(" "),a("li",[a("p",[t._v("JDK1.8的改进。")]),t._v(" "),a("p",[t._v("假如一个数组槽位上的数据过多。那么性能就会急剧下降。JDK1.8 对这这部分坐了优化，当链的长度超过8个的时候就转换为红黑树。红黑树拥有快速增删改查的特点。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Map.putVal()")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当其中链表中的数据量为7个 >=8-1 就调用 treeifyBin(tab, hash);方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" TREEIFY_THRESHOLD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1 for 1st")]),t._v("\n")])])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Replaces all linked nodes in bin at index for given hash unless\n     * table is too small, in which case resizes instead.\n     * 上面的翻译过来也不懂。大概意思就是在特定的情况下把链表上的数据转换成红黑树 over\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("treeifyBin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不转换 tab为空，或者长度小于这个变量（1.8V 64）则调整容量")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MIN_TREEIFY_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哈希计算该放在哪里")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义首尾节点")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" hd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把节点转换为TreeNode")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replacementTreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尾节点为空")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    hd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原来是单向列表。这里修改为双向列表")]),t._v("\n                    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    tl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                tl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正戏开始 开始转换")]),t._v("\n                hd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("treeify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("LinkedHashMap (类)")]),t._v(" "),a("p",[t._v("使用双向链表来维护顺序，与插入顺序一致")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("HashTable (类)")])]),t._v(" "),a("blockquote",[a("p",[t._v("古老的Map实现类，采用拉链法实现哈希表。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("SortedMap (接口)")])]),t._v(" "),a("ul",[a("li",[t._v("TreeMap,红黑树结构。根据Key对节点排序")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("WeakHashMap (类)")])]),t._v(" "),a("p",[t._v("弱化之后的hashMap. 强引用的对象不会被回收，但是Weak只保留了弱引用，可能被回收，然后被集合自动删除")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("IdentityhashMap (类)")])]),t._v(" "),a("p",[t._v("对key的比较是严格比较（==），比较内存地址，而不是比较哈希值")])]),t._v(" "),a("li",[a("p",[t._v("EnumMap (类)")]),t._v(" "),a("p",[t._v("ke y必须是一个枚举的枚举值。")])])]),t._v(" "),a("h3",{attrs:{id:"iterable-超级接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterable-超级接口"}},[t._v("#")]),t._v(" Iterable（超级接口）")]),t._v(" "),a("blockquote",[a("p",[t._v("超级接口，被Collection继承，有一个抽象方法，iterable返回一个迭代器，1.8之后增加两个默认方法")]),t._v(" "),a("p",[t._v("Collection:层次结构的根接口，表示一组对象，相当于一个长度可变，可存不同对象的数组。不同的子类对于，有序性，重复性，null，线程安全都有不同的策略，具体由子类实现")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://mrtao-bucket.oss-cn-shanghai.aliyuncs.com/1619163852380-iShot2021-04-23%2015.44.03.png",alt:""}})])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Collection（接口）")])]),t._v(" "),a("li",[a("p",[t._v("LIst（接口）:")]),t._v(" "),a("blockquote",[a("p",[t._v("有序的collection,可以对列表中的每个元素精准控制。可以根据索引精准访问。可以顺序插入或者精准插入，允许重复，还提供了特殊的迭代器，listiterator,提供了一些特殊的访问方式，双向访问，插入替换，指定位置迭代，")]),t._v(" "),a("p",[t._v("子类如下：")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("ArrayList (类)")])]),t._v(" "),a("ol",[a("li",[t._v("基于数组实现的List类，封装了一个动态的Object数组，支持快速的随机访问。")]),t._v(" "),a("li",[t._v("ArrayList中间操作元素的时候需要对数组进行复制和移动，代价比较高，\n"),a("ul",[a("li",[t._v("优点：适合随机访问。")]),t._v(" "),a("li",[t._v("缺点：不适合操作。")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Vector (类)")])]),t._v(" "),a("blockquote",[a("p",[t._v("Vector和ArrayList一样，也是通过数组实现的，不过是线程安全的，因为效率低下，很少使用。")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Stack (类)")])]),t._v(" "),a("p",[t._v("Stack是Vector提供的子类，用于模拟"),a("code",[t._v("栈")]),t._v("这种数据结构，先进先出。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("LinkeList (类")]),t._v(")")]),t._v(" "),a("blockquote",[a("p",[t._v("基于链表实现的list,适合数据的动态插入和删除，不适合遍历。")]),t._v(" "),a("p",[t._v("另外，它还实现了Deque接口，用于操作链头和链尾元素。可以当作堆栈，队列，双向队列。")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Set (接口)")])]),t._v(" "),a("p",[t._v("故名思义，集合的意思，和数学的集合一样，无序，单一，确定性。类似于一个罐子")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("HashSet (类)")])]),t._v(" "),a("p",[t._v("set的典型实现。使用Hash算法来存储集合中的元素。底层使用HashMap.因此具有良好的存储和查找性能。当存入一个元素的时候，调用对象的hashCode方法得到对象的哈希值，根据哈希值来决定存放的位置。判断两个集合相等时equals方法，并且hash值相等")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("LinkedHashSet (类)：")]),t._v(" "),a("p",[t._v("继承自hashSet接口，也是根据HashCode来决定元素的位置，但是同时使用链表维护顺序。使元素看起来像是用插入顺序保存的。")]),t._v(" "),a("p",[t._v("遍历时候按照添加顺序来访问元素，链表适合遍历")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("SortedSet (接口)")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("TreeSet (类)")])]),t._v(" "),a("p",[t._v("TreeSet时sortedSet集合的实现类，可以确保元素处于排序状态")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("EnumSet (类)")])]),t._v(" "),a("p",[t._v("专门为枚举设计的，所有元素必须是指定枚举值。有序")])])])])]),t._v(" "),a("h3",{attrs:{id:"queue-队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue-队列"}},[t._v("#")]),t._v(" Queue (队列)")]),t._v(" "),a("p",[t._v("此接口用于模拟‘队列’数据结构，")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("PriorityQuere  优先队列")]),t._v(" "),a("p",[t._v("按照队列中的某个属性大小来排放的")])]),t._v(" "),a("li",[a("p",[t._v("Deque - 双端队列")]),t._v(" "),a("ul",[a("li",[t._v("ArrayDeque:基于数组的双端队列")]),t._v(" "),a("li",[t._v("LinkedList: 上。链表有序集合")])])])]),t._v(" "),a("h2",{attrs:{id:"_19-collection-和-collections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-collection-和-collections"}},[t._v("#")]),t._v(" 19.Collection 和 Collections")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Collection 集合接口，为各种具体的集合提供统一的操作方式，实现该接口的类有list set")]),t._v(" "),a("p",[t._v("List,Set集合的接口，规范了集合的统一操作方式。实现iterator。")])]),t._v(" "),a("li",[a("p",[t._v("Collections 是一个工具类，提供了对各种集合的操作，搜索，排序，线程安全化")]),t._v(" "),a("p",[t._v("工具类，提供了对各种集合操作的一些工具，搜索排序，线程安全")])])]),t._v(" "),a("h2",{attrs:{id:"_20-list、set、map-之间的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-list、set、map-之间的区别是什么"}},[t._v("#")]),t._v(" 20.List、Set、Map 之间的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("List ： 有序的，可以重复")]),t._v(" "),a("li",[t._v("Set: 无序的，不可重复")]),t._v(" "),a("li",[t._v("Map:键值对，键不可以重复")])]),t._v(" "),a("h2",{attrs:{id:"_21-在-queue-中-poll-和-remove-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-在-queue-中-poll-和-remove-有什么区别"}},[t._v("#")]),t._v(" 21.在 Queue 中 poll()和 remove()有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("Poll\\remove\n"),a("ul",[a("li",[t._v("相同点，移除第一个元素，并返回")]),t._v(" "),a("li",[t._v("不同点，remove元素为空的时候会报错")])])]),t._v(" "),a("li",[t._v("add|offer\n"),a("ul",[a("li",[t._v("相同点：向队列添加一个元素")]),t._v(" "),a("li",[t._v("add容量满的情况下会抛异常，offer会返回false")])])]),t._v(" "),a("li",[t._v("element|peek\n"),a("ul",[a("li",[t._v("相同点，返回列头的元素，不删除")]),t._v(" "),a("li",[t._v("element 抛异常，peek返回null")])])])]),t._v(" "),a("h2",{attrs:{id:"_22-哪些集合类是线程安全的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-哪些集合类是线程安全的"}},[t._v("#")]),t._v(" 22.哪些集合类是线程安全的？")]),t._v(" "),a("ul",[a("li",[t._v("HashTable:很老的map 类似于拉链法来存储数据")]),t._v(" "),a("li",[t._v("Vector: 线程安全的List")]),t._v(" "),a("li",[t._v("CouncurrentHashMap:线程安全的HashMap的升级版，大量采用CAS操作，比较并交换")]),t._v(" "),a("li",[t._v("Stack ： 栈 线程安全的 继承与vector")]),t._v(" "),a("li",[t._v("枚举：")])]),t._v(" "),a("h2",{attrs:{id:"_23-迭代器-iterator-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-迭代器-iterator-是什么"}},[t._v("#")]),t._v(" 23. 迭代器 Iterator 是什么？")]),t._v(" "),a("p",[t._v("用于顺序访问集合的对象，为各种容器提供公共的操作接口，所有collcation体系的集合都有自己的迭代器。")]),t._v(" "),a("h2",{attrs:{id:"_24-iterator-怎么使用-有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-iterator-怎么使用-有什么特点"}},[t._v("#")]),t._v(" 24. Iterator 怎么使用？有什么特点？")]),t._v(" "),a("p",[t._v("hasNext （），next(),remove() ，遍历的时候不允许线程堆集合修改，允许遍历过程中删除元素")]),t._v(" "),a("h2",{attrs:{id:"_25-iterator-和-listiterator-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-iterator-和-listiterator-有什么区别"}},[t._v("#")]),t._v(" 25.Iterator 和 ListIterator 有什么区别？")]),t._v(" "),a("p",[t._v("ListIterator继承字Iterator,多了一些功能，比如添加，逆向遍历等")]),t._v(" "),a("h2",{attrs:{id:"_26-怎么确保一个集合不能被修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-怎么确保一个集合不能被修改"}},[t._v("#")]),t._v(" 26.怎么确保一个集合不能被修改？")]),t._v(" "),a("p",[t._v("使用Collections的unmodifiableList,Collections.unmodifiableSet方法")]),t._v(" "),a("h1",{attrs:{id:"线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),a("h2",{attrs:{id:"_1-并行和并发有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-并行和并发有什么区别"}},[t._v("#")]),t._v(" 1.并行和并发有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("并行，指的是多个时间在同一刻发生，是在不同的实体上的时间")])]),t._v(" "),a("ul",[a("li",[t._v("并发：指的是多个事件在同一时间间隔发生，是在一个实体上的事件")])]),t._v(" "),a("h2",{attrs:{id:"_2-线程和进程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程和进程的区别"}},[t._v("#")]),t._v(" 2.线程和进程的区别")]),t._v(" "),a("ul",[a("li",[t._v("进程可以说是一个独立功能应用程序，系统进行资源分配和调用的独立单位")]),t._v(" "),a("li",[t._v("线程，进程的实体，一个进程是有多个线程组成的，线程是c pu调用和分配的最小单位，线程基本不拥有系统资源，只有一些，计数器，寄存器，栈，和其他线程共享进程资源。")])]),t._v(" "),a("h2",{attrs:{id:"_3-守护线程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-守护线程是什么"}},[t._v("#")]),t._v(" 3.守护线程是什么？")]),t._v(" "),a("p",[t._v("守护线程，服务线程，准确的来说就是用来服务其他线程。比如Java的垃圾回收线程。就是守护线程，用户线程执行完了，main都执行玩了，jvm自然也停止了，守护线程也就结束了。")]),t._v(" "),a("h2",{attrs:{id:"_4-创建线程有哪几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建线程有哪几种方式"}},[t._v("#")]),t._v(" 4. 创建线程有哪几种方式？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("继承Thread类创建线程，重写run方法，初始化 调用start()方法。")])]),t._v(" "),a("li",[a("p",[t._v("Runnable 实现该接口，重写run方法，创建Thread 传入Runnable调用start")])]),t._v(" "),a("li",[a("p",[t._v("Callable方法 Futrue ,有返回值的线程。 代码掩饰")]),t._v(" "),a("ul",[a("li",[t._v("带返回值的线程，提供了一些方法，cancel取消，是否取消，是否完成，get获取结果（阻塞方法），带参get 指定时间内返回 否则空")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Task")]),t._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Task")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"祝线程"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"task运行结果"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"所有任务执行完毕"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Task")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子线程在进行计算"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"_5-说一下-runnable-和-callable-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-说一下-runnable-和-callable-有什么区别"}},[t._v("#")]),t._v(" 5.说一下 runnable 和 callable 有什么区别？")]),t._v(" "),a("p",[t._v("Runable的执行方法是run，callable是call. 并且是有返回值的 还可以抛异常，返回一个Future的结果。；")]),t._v(" "),a("h2",{attrs:{id:"_6-线程有哪些状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-线程有哪些状态"}},[t._v("#")]),t._v(" 6. 线程有哪些状态？")]),t._v(" "),a("ol",[a("li",[t._v("新建状态：new Thread(),新建线程 还没有起的的状态")]),t._v(" "),a("li",[t._v("就绪状态：调用start()方法，但是还没有被c pu分配资源")]),t._v(" "),a("li",[t._v("执行状态：获取c pu资源开始执行任务")]),t._v(" "),a("li",[t._v("阻塞挂起：通过sleep，wait,或者执行的时间比较长的时候会被线程挂起，如果是sleep，wait方法挂起，不会进入线程队列，等待被分配资源，而是挂起的原因解除之后才会进入")]),t._v(" "),a("li",[t._v("死亡状态：线程运行完毕，或者被停止。")])]),t._v(" "),a("h2",{attrs:{id:"_8-sleep-和-wait-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-sleep-和-wait-有什么区别"}},[t._v("#")]),t._v(" 8.sleep() 和 wait() 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("Sleep属于线程的方法，将线程挂起一段时间，让出c pu资源，但是依然保持监听状态，并且不会让出锁")]),t._v(" "),a("li",[t._v("wait是Object的方法，会放弃当前锁，并进入线程等待池。只有等针对此对象的notiry或者notiryAll，才会进入就绪队列，等待锁进入运行状态")])]),t._v(" "),a("h2",{attrs:{id:"_9-notify-和-notifyall-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-notify-和-notifyall-有什么区别"}},[t._v("#")]),t._v(" 9.  notify()和 notifyAll()有什么区别？")]),t._v(" "),a("p",[t._v("等待池的概念。多个线程在等待一个对象的锁，会进入该对象的等待池，如果一个线程调用了对象的wait（）方法，会进入等待池。这个等待池的对象不会主动竞争锁，锁池：锁池，等待获取锁。 notify会随机唤醒一个等待池的对象。all就是唤醒所有的进入到锁池")]),t._v(" "),a("h2",{attrs:{id:"_10-线程的-run-和-start-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-线程的-run-和-start-有什么区别"}},[t._v("#")]),t._v(" 10.线程的 run()和 start()有什么区别？")]),t._v(" "),a("p",[t._v("Run，线程处理逻辑的主入口，由虚拟机调用。")]),t._v(" "),a("p",[t._v("start, 启动线程，使线程进入就绪状态。")]),t._v(" "),a("h2",{attrs:{id:"_11-创建线程池有哪几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-创建线程池有哪几种方式"}},[t._v("#")]),t._v(" 11.创建线程池有哪几种方式？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("newSingleThreadExecutor 单线程池，只有一个线程工作，串行执行，按照顺序")])]),t._v(" "),a("li",[a("p",[t._v("newFixedThreadPood 固定大小的线程池。")])]),t._v(" "),a("li",[a("p",[t._v("newChchedThreadPool 可缓存的线程池。回自动回收的线程 60s空闲，会只能的增加减少")])]),t._v(" "),a("li",[a("p",[t._v("newScheduledThreadPool 定长的线程池，支持定时，周期执行,跟其他不同使用延时队列来实现的")]),t._v(" "),a("blockquote",[a("p",[t._v("其实都是调用的ThreadPoolExecutor方法。只是参数不同")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程池的大小")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程是的最大的树")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当线程空闲多长时间销毁，默认是数量大于线程池的初始大小的时候，有一个allow方法可以修改这个默认值。")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//上面的时间单位")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞队列，存储等待执行的任务，ArrayBlockingQueue,LinkedBlokingQueue,synchronousQueue")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n             "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultThreadFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultHandler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])])]),t._v(" "),a("h2",{attrs:{id:"_12-线程池都有哪些状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-线程池都有哪些状态"}},[t._v("#")]),t._v(" 12.线程池都有哪些状态")]),t._v(" "),a("ul",[a("li",[t._v("RUNNING:最正常的状态，接受任务，处理队列中的任务， 初始化之后就是这个状态")]),t._v(" "),a("li",[t._v("SHUTDOWN: 不接受新的任务，但是会处理队列中的任务，shutdown方法")]),t._v(" "),a("li",[t._v("STOP : 不接受任务，不处理等待队列中的任务，中断当前在执行任务的线程，shutdownNow()")]),t._v(" "),a("li",[t._v("TIDYING: 所有的任务都销毁了，workCound 为0，在转为该状态前为执行钩子函数terminated(),用于可以自定义相应的处理，在shutdown状态，阻塞队列和线程池执行的任务也为空就变成TIDYING状态，在stop状态，执行的任务为空就变味TIDYING")]),t._v(" "),a("li",[t._v("TERMINATED 执行完terminated方法之后就为该状态")])]),t._v(" "),a("h2",{attrs:{id:"_13-submit和execute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-submit和execute"}},[t._v("#")]),t._v(" 13.submit和execute")]),t._v(" "),a("ul",[a("li",[t._v("submit：参数Runnable和Callable 又返回值 可以抛出异常")]),t._v(" "),a("li",[t._v("execute: 参数Runnable 没有返回值")])]),t._v(" "),a("h2",{attrs:{id:"_14-在-java-程序中怎么保证多线程的运行安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-在-java-程序中怎么保证多线程的运行安全"}},[t._v("#")]),t._v(" 14.在 java 程序中怎么保证多线程的运行安全？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.原子性：一个或者多个操作不可被中断  atomic synchronized")]),t._v(" "),a("blockquote",[a("p",[t._v("一个操作不可被中断，就常用的a++,是分三步操作的，内存中读取，+1，写会内存。如果中间中断结果就不一定了。可采用atomic来搞定 底层使用unsafe")])])]),t._v(" "),a("li",[a("p",[t._v("2.可见性：一个线程对主内存的修改可以及时的被其他线程看到 synchronized volatile")])]),t._v(" "),a("li",[a("p",[t._v("3.有序性：程序执行的顺序按照代码的先后顺序执行 heppends-before")])])]),t._v(" "),a("h2",{attrs:{id:"_15-多线程锁的升级原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-多线程锁的升级原理"}},[t._v("#")]),t._v(" 15.多线程锁的升级原理")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无锁：对资源不锁定，所有线程都能访问和修改，但是同时只有一个可以修改成功，其他的不断尝试")])]),t._v(" "),a("li",[a("p",[t._v("偏向锁：一段代码一直被同一个线程访问，那么线程会自动获取锁。指的是偏向于第一个获取锁的线程，")])]),t._v(" "),a("li",[a("p",[t._v("轻量级锁：当锁是偏向锁的时候，被另外一个线程访问就会升级为轻量级锁。另一个线程会通过自旋的方式来不断获取锁。不会阻塞，性能高。")])]),t._v(" "),a("li",[a("p",[t._v("重量级锁：当轻量级锁的时候，另一个锁子旋到一定的次数，或者有第三个线程加入，就会升级为重量级锁。其他线程会进入阻塞。")])])]),t._v(" "),a("h2",{attrs:{id:"_16-什么是死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-什么是死锁"}},[t._v("#")]),t._v(" 16. 什么是死锁？")]),t._v(" "),a("p",[t._v("互斥，请求与保持，不可剥夺，循环等待\n两个或以上的线程都占有对方需要的资源，僵住了")]),t._v(" "),a("h2",{attrs:{id:"_17-怎么防止死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-怎么防止死锁"}},[t._v("#")]),t._v(" 17. 怎么防止死锁")]),t._v(" "),a("ul",[a("li",[t._v("有序访问 破坏循坏等待")]),t._v(" "),a("li",[t._v("tryLock 尝试加锁 不可剥夺")])]),t._v(" "),a("h2",{attrs:{id:"_18-常用的那些锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-常用的那些锁"}},[t._v("#")]),t._v(" 18 常用的那些锁")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("公平锁/非公平锁")]),t._v(" "),a("ul",[a("li",[t._v("公平锁：线程按照申请锁的顺序来获取锁")]),t._v(" "),a("li",[t._v("非公平锁：不是按照顺序来执行的")])])]),t._v(" "),a("li",[a("p",[t._v("可重入锁/非可重入锁")]),t._v(" "),a("ul",[a("li",[t._v("可重入锁：一个线程在外层方法获取锁的同时，进入内层方法，自动获取锁")]),t._v(" "),a("li",[t._v("不可重入锁：进入内层方法时需要释放外层的锁，会造成死锁。")])])]),t._v(" "),a("li",[a("p",[t._v("独享锁/共享锁")]),t._v(" "),a("ul",[a("li",[t._v("独享锁：一个锁只能被一个线程持有，写锁")]),t._v(" "),a("li",[t._v("共享锁：一个锁可以被多个线程持有，读锁")])])]),t._v(" "),a("li",[a("p",[t._v("互斥锁/读写锁")]),t._v(" "),a("ul",[a("li",[t._v("实现ReentrantLock 互斥锁")]),t._v(" "),a("li",[t._v("ReadWriteLock 读写锁")])])]),t._v(" "),a("li",[a("p",[t._v("悲观锁/乐观锁")]),t._v(" "),a("ul",[a("li",[t._v("悲观锁：认为同一个数据一定发生修改的，所以进行操作的时候加锁。")]),t._v(" "),a("li",[t._v("乐观锁：认为不会被修改，所以操作的时候会采用不断尝试的方法来")])]),t._v(" "),a("blockquote",[a("p",[t._v("乐观锁在Java 中使用的无锁编程。通常采用的CAS算法。Compare And Swap,就是通过自旋的方式不断的比较旧值然后更新，")])])]),t._v(" "),a("li",[a("p",[t._v("分段锁")]),t._v(" "),a("ul",[a("li",[t._v("指的是锁的一种设计。并不是一种具体的锁，对于ConcurrentHashMap的并发就是根据分段锁的设计来实现的。Map内部有一个Entry数组，数组中的每一个元素又是一个链表，同时又是一个Segment锁。简单的说就是将元素分组，然后根据组来加锁，当多线程put的时候只要不是一个分组就是并行的插入。")])])]),t._v(" "),a("li",[a("p",[t._v("自适应自选锁：")]),t._v(" "),a("p",[t._v("自适应自选锁以为着自选的次数不再固定，以前是默认十次。而是根据上一次在同一个锁上的自选时间来决定的。如果自旋转很少成功则直接阻塞")])])]),t._v(" "),a("h2",{attrs:{id:"_19-threadlocal是什么-有哪些使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-threadlocal是什么-有哪些使用场景"}},[t._v("#")]),t._v(" 19. ThreadLocal是什么？有哪些使用场景")]),t._v(" "),a("p",[t._v("线程本地存储，多线程访问共享变量的时候容易出现并发问题。为了保证线程安全。访问共享变量的时候需要额外的同步措施。每个线程访问共享变量的时候访问的是自己的变量副本。ThreadLocal为每个使用该变量的线程维护一个变量副本。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码案例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" localVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localVar1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"thread1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after remove:"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localVar2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"thread2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after remove:"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("localVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("看似是两个线程修改ThreadLocal这个对象，实际这个set方法大有玄机")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取调用线程")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取调用线程的本地存储Map")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把值放进去 over")]),t._v("\n            map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("相当于我让你把我的东西放到我的兜里面去")])]),t._v(" "),a("h2",{attrs:{id:"_20-说一下-synchronized-底层实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-说一下-synchronized-底层实现原理"}},[t._v("#")]),t._v(" 20.说一下 synchronized 底层实现原理？")]),t._v(" "),a("p",[t._v("没了解到")]),t._v(" "),a("h2",{attrs:{id:"_21-synchronized-和-volatile-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-synchronized-和-volatile-的区别是什么"}},[t._v("#")]),t._v(" 21.synchronized 和 volatile 的区别是什么？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("volatile")]),t._v(" "),a("p",[t._v("可以保证有序性和可见性，有序性，禁止指令重排，volatile前面的代码先于后面的代码执行，可见性，一个线程对volatile修饰的变量做出修改，其他线程得到通知。不能保证原子性，比如i++分为三步 ，可见性只能保证读取的时候是最新的。但是不保证写回的时候数据没有被改变")])]),t._v(" "),a("li",[a("p",[t._v("synchronized 能作用域变量 ，方法，类，代码块。可见性，原子性，有序性都能保证，回阻塞")])])]),t._v(" "),a("h2",{attrs:{id:"_22-synchronized-和-lock-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-synchronized-和-lock-有什么区别"}},[t._v("#")]),t._v(" 22. synchronized 和 Lock 有什么区别？")]),t._v(" "),a("p",[t._v("Synchronized属于JVM层面的锁，不需要手动释放，不可中断，除非异常")]),t._v(" "),a("p",[t._v("Lock属于API层面的锁，需要手动释放，unLock ，配合try finally来完成，可中断interrupt。")]),t._v(" "),a("h2",{attrs:{id:"_23-synchronized-和-reentrantlock-区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-synchronized-和-reentrantlock-区别是什么"}},[t._v("#")]),t._v(" 23. synchronized 和 ReentrantLock 区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("synchronized 非公平锁，等待不可中断，唤醒一个或一大堆")]),t._v(" "),a("li",[t._v("RenntranLock 可设置公平锁，可中断锁，可以设置获取锁的等待时间，可分组或精确唤醒")])]),t._v(" "),a("h2",{attrs:{id:"_24-说一下-atomic-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-说一下-atomic-的原理"}},[t._v("#")]),t._v(" 24 说一下 atomic 的原理？")]),t._v(" "),a("p",[t._v("atomic 使用无锁机制，通过unsage类来完成对内存地址的访问，conpare and swap方法，自旋不断去比较旧值来做更新")]),t._v(" "),a("h2",{attrs:{id:"_25-什么是反射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-什么是反射"}},[t._v("#")]),t._v(" 25. 什么是反射？")]),t._v(" "),a("p",[t._v("在运行环境，对于任意一个类，都能够知道这个类的方法和属性，对于一个对象都可以调用他的方法和属性。这种动态调用和动态获取的方式就是反射机制。")]),t._v(" "),a("h1",{attrs:{id:"java-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-基础"}},[t._v("#")]),t._v(" Java 基础")]),t._v(" "),a("h2",{attrs:{id:"_26-什么是-java-序列化-什么情况下需要序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-什么是-java-序列化-什么情况下需要序列化"}},[t._v("#")]),t._v(" 26. 什么是 java 序列化？什么情况下需要序列化？")]),t._v(" "),a("p",[t._v("序列化就是讲对象转换成字节流的过程，当对象需要在网络上传输的时候或者持久化存储的时候就需要序列化。")]),t._v(" "),a("h2",{attrs:{id:"_27-动态代理是什么-有哪些应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-动态代理是什么-有哪些应用"}},[t._v("#")]),t._v(" 27. 动态代理是什么？有哪些应用？")]),t._v(" "),a("p",[t._v("当想给实现了某个类的接口的某个方法加一些额外的功能，比如日志记录等。可以给这个类一个代理，创建一个新类 拥有他的功能和加强的功能，动态生成的 aop")]),t._v(" "),a("h2",{attrs:{id:"_28-怎么实现动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-怎么实现动态代理"}},[t._v("#")]),t._v(" 28. 怎么实现动态代理？")]),t._v(" "),a("p",[t._v("JDK 实现InvocationHandler实现invoke方法，提供接口")]),t._v(" "),a("p",[t._v("CGLIB 导入依赖，实现MethodInterceptor的Interceptor")]),t._v(" "),a("h2",{attrs:{id:"_29-为什么要使用克隆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-为什么要使用克隆"}},[t._v("#")]),t._v(" 29. 为什么要使用克隆？")]),t._v(" "),a("p",[t._v("对一个对象进行草最，又想保留原有的对象，克隆，分为深度克隆和浅克隆")]),t._v(" "),a("h2",{attrs:{id:"_30-如何实现对象克隆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-如何实现对象克隆"}},[t._v("#")]),t._v(" 30. 如何实现对象克隆？")]),t._v(" "),a("ul",[a("li",[t._v("浅复制：Object的Clone方法")]),t._v(" "),a("li",[t._v("深复制 序列化或者Json")])]),t._v(" "),a("h2",{attrs:{id:"_31-深拷贝和浅拷贝区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-深拷贝和浅拷贝区别是什么"}},[t._v("#")]),t._v(" 31.深拷贝和浅拷贝区别是什么？")]),t._v(" "),a("p",[t._v("深拷贝相当于两个对象，先拷贝是同一个引用")]),t._v(" "),a("h1",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("h1",{attrs:{id:"_1-throw-和-throws-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-throw-和-throws-的区别"}},[t._v("#")]),t._v(" 1. throw 和 throws 的区别？")]),t._v(" "),a("ul",[a("li",[t._v("throw 表示方法内抛出某种异常对象，不是运行时异常则需要捕捉，try catch 捕捉，")]),t._v(" "),a("li",[t._v("throws 使用在方法的定义上，表示这个方法可能抛出异常，需要调用者处理")])]),t._v(" "),a("h2",{attrs:{id:"_2-final、finally、finalize-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-final、finally、finalize-有什么区别"}},[t._v("#")]),t._v(" 2.final、finally、finalize 有什么区别？")]),t._v(" "),a("p",[t._v("finalize　　Object的方法，被回收时调用，一般new出来的对象都能被回收，")]),t._v(" "),a("h2",{attrs:{id:"_3-try-catch-finally-中哪个部分可以省略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-try-catch-finally-中哪个部分可以省略"}},[t._v("#")]),t._v(" 3. try-catch-finally 中哪个部分可以省略？")]),t._v(" "),a("p",[t._v("catch 或 finally")]),t._v(" "),a("h2",{attrs:{id:"_4-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[t._v("#")]),t._v(" 4.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？")]),t._v(" "),a("p",[t._v("return 前执行")]),t._v(" "),a("h2",{attrs:{id:"_5-常见的异常类有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-常见的异常类有哪些"}},[t._v("#")]),t._v(" 5. 常见的异常类有哪些？")]),t._v(" "),a("p",[t._v("THrowable 根类\nIO 异常 DataFormar异常 sql 异常 运行时异常 ，空指针，内存溢出")]),t._v(" "),a("h1",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" #设计模式")]),t._v(" "),a("h2",{attrs:{id:"说一下常用的设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下常用的设计模式"}},[t._v("#")]),t._v(" 说一下常用的设计模式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单例模式：一个类只有自己创建自己的一个实例，给其他所有的对象提供的都是这一个实例")])]),t._v(" "),a("li",[a("p",[t._v("工厂模式：创建一个对象的时候不用暴露创建逻辑，只需要通过一个共用的接口来指向新创建的对象")])]),t._v(" "),a("li",[a("p",[t._v("抽象工厂模式：围绕一个超级工厂创建其他工厂")])]),t._v(" "),a("li",[a("p",[t._v("适配器：将一个接口转换为另一个类希望的接口，解决接口不兼容的问题\n#Spring/Spring MVC\n##90. 为什么要使用 spring？")])]),t._v(" "),a("li",[a("p",[t._v("轻量，小，是非侵入式的，spring的对象不依赖于spring")])]),t._v(" "),a("li",[a("p",[t._v("控制反转，使用ioc促进低耦合，应用了ioc之后，一个对象所依赖的对象会通过被动的方式传递进来。而不是对象自己创建或查找依赖对象")])]),t._v(" "),a("li",[a("p",[t._v("面向切面编程 通过分离业务逻辑和系统级服务和事物进行内聚性开发。对象只关注完成业务逻辑，通过切面对一个对象的方法进行加强，完成一些系统级的服务，日志 事物")])]),t._v(" "),a("li",[a("p",[t._v('容器 spring管理引用对象的生命周期和配置，默认是单例 scope = "singleton" prototype,request session')])])]),t._v(" "),a("h1",{attrs:{id:"spring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),a("h2",{attrs:{id:"_1-spring-有哪些主要模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring-有哪些主要模块"}},[t._v("#")]),t._v(" 1.spring 有哪些主要模块？")]),t._v(" "),a("p",[t._v("Spring有七大功能模块，分别是Spring Core，AOP，ORM，DAO，MVC，WEB，Context。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Spring Core")]),t._v(" "),a("p",[t._v("核心部分，提供了spring的基本容器功能，spring以Bean的方式来管理和组织引用中的各个组件，通过BeanFactory工厂来创建各个Bean。使用控制反转（IOC）将应用的配置和依赖于实际的应用分开，通过依赖注入的方式提供给组件依赖")])]),t._v(" "),a("li",[a("p",[t._v("Context")]),t._v(" "),a("p",[t._v("上下文是一个配置文件，向spring框架提供上下文信息。继承beanFacotry，添加了一些其他功能，远程调用，模板，email和定时任务等")])]),t._v(" "),a("li",[a("p",[t._v("AOP")]),t._v(" "),a("p",[t._v("切面编程，拦截机制，并提供了常用的拦截器，在不修改源码的情况下，可以为业务中的某些模块添加一些功能")])]),t._v(" "),a("li",[a("p",[t._v("ORM")]),t._v(" "),a("p",[t._v("Spring 的ORM模块提供对常用的ORM框架的管理和辅助支持，Spring支持常用的Hibernate，ibtas，jdao等框架的支持，Spring本身并不对ORM进行实现，仅对常见的ORM框架进行封装，并对其进行管理")])]),t._v(" "),a("li",[a("p",[t._v("DAO")]),t._v(" "),a("p",[t._v("Spring 提供对JDBC的支持，对JDBC进行封装，允许JDBC使用Spring资源，并能统一管理JDBC事物，并不对JDBC进行实现。（执行sql语句）")])]),t._v(" "),a("li",[a("p",[t._v("WEB")]),t._v(" "),a("p",[t._v("WEB模块提供对常见框架如Struts1，WEBWORK（Struts 2），JSF的支持，Spring能够管理这些框架，将Spring的资源注入给框架，也能在这些框架的前后插入")])]),t._v(" "),a("li",[a("p",[t._v("MVC")])])]),t._v(" "),a("p",[t._v("模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便。")]),t._v(" "),a("h2",{attrs:{id:"_2-spring-常用的注入方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-常用的注入方式有哪些"}},[t._v("#")]),t._v(" 2.spring 常用的注入方式有哪些？")]),t._v(" "),a("p",[t._v("构造方法 setter注入 @autowrie")]),t._v(" "),a("h2",{attrs:{id:"_3-spring-中的-bean-是线程安全的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring-中的-bean-是线程安全的吗"}},[t._v("#")]),t._v(" 3. spring 中的 bean 是线程安全的吗？")]),t._v(" "),a("p",[t._v("spring 容器本身并没有提供线程安全策略。因此可以说容器中的bean是不具备线程安全的，如果是基于作用域来看的话 单例模式  不安全 prototype 安全 不存在共享，单例bean是无状态的就是安全的。多余有状态的bean一般是通过ThreadLoad去解决的")]),t._v(" "),a("h2",{attrs:{id:"_4-spring-支持几种-bean-的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring-支持几种-bean-的作用域"}},[t._v("#")]),t._v(" 4.spring 支持几种 bean 的作用域？")]),t._v(" "),a("p",[t._v("singleton prototype request session global session")]),t._v(" "),a("h2",{attrs:{id:"_5-spring-自动装配-bean-有哪些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring-自动装配-bean-有哪些方式"}},[t._v("#")]),t._v(" 5.spring 自动装配 bean 有哪些方式？")]),t._v(" "),a("p",[t._v("no 显示装配\nbyName 通过名称\nbyType 类型\n构造函数\nautodetect")]),t._v(" "),a("h2",{attrs:{id:"_6-spring-事务实现方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-spring-事务实现方式有哪些"}},[t._v("#")]),t._v(" 6. spring 事务实现方式有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("编程式事物 beginTransaction commit rollback")]),t._v(" "),a("li",[t._v("基于TransactionProxyFactoryBean的声明式事物")]),t._v(" "),a("li",[t._v("@Transaction的声明式")]),t._v(" "),a("li",[t._v("基于Aspectj AOP配置事务")])]),t._v(" "),a("h2",{attrs:{id:"_7-说一下-spring-的事务隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-说一下-spring-的事务隔离"}},[t._v("#")]),t._v(" 7. 说一下 spring 的事务隔离？")]),t._v(" "),a("p",[t._v("读为提交 读已提交 可重复读 串行化")]),t._v(" "),a("h2",{attrs:{id:"_8-说一下-spring-mvc-运行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-说一下-spring-mvc-运行流程"}},[t._v("#")]),t._v(" 8.说一下 spring mvc 运行流程？")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("一个请求匹配前端控制器DispatcherService的请求映射路径，")])]),t._v(" "),a("li",[a("p",[t._v("DispatcherService接受到请求后，根据请求信息交给处理器映射器（handlerMapping）")])]),t._v(" "),a("li",[a("p",[t._v("HandlerMapping根据Url找到匹配的Handler,并返回一个执行链。")])]),t._v(" "),a("li",[a("p",[t._v("DispatcherServer在请求处理器适配器（HandlerAdapter）调用相应的Handler进行处理并返回ModeAndView。")])]),t._v(" "),a("li",[a("p",[t._v("DispatcherService将ModelAndView发送给视图解析器（ViewReslover）解析，返回具体view")])]),t._v(" "),a("li",[a("p",[t._v("DispatcherService对View进行渲染，将数据模型填充到视图中")])]),t._v(" "),a("li",[a("p",[t._v("DispatcherService 响应客户")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images2018.cnblogs.com/blog/1370903/201808/1370903-20180827201021158-682489195.png",alt:"img"}})])])]),t._v(" "),a("ul",[a("li")]),t._v(" "),a("h2",{attrs:{id:"_9-spring-mvc-有哪些组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-spring-mvc-有哪些组件"}},[t._v("#")]),t._v(" 9.spring mvc 有哪些组件？")]),t._v(" "),a("p",[t._v("前端控制器，处理器映射器，处理器适配器。拦截器，主题解析，视图解析，异常处理器，文件上传器")]),t._v(" "),a("h2",{attrs:{id:"_10-requestmapping-的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-requestmapping-的作用是什么"}},[t._v("#")]),t._v(" 10.@RequestMapping 的作用是什么？")]),t._v(" "),a("p",[t._v("用于类和方法上，用于路径匹配")]),t._v(" "),a("h2",{attrs:{id:"_11-autowired-的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-autowired-的作用是什么"}},[t._v("#")]),t._v(" 11.@Autowired 的作用是什么？")]),t._v(" "),a("p",[t._v("用于依赖注入")]),t._v(" "),a("h1",{attrs:{id:"spring-boot-spring-cloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-spring-cloud"}},[t._v("#")]),t._v(" Spring Boot/Spring Cloud")]),t._v(" "),a("p",[t._v("##104.什么是 spring boot？\nspringBoot 是spring开源框架下面的一个子项目，是spring的一站式解决方案，主要是降低了spring的使用难度，降低了对配置的要求，简化了spring的配置文件，没有代码和XML的生成，内齿tomcat能够独立运行。\n##105.为什么要用 spring boot？\n使编码 配置，部署 监控更简单\n##106.spring boot 核心配置文件是什么？\nbootstrap 和application\n##107.spring boot 配置文件有哪几种类型？它们有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("yml: key：val 层次感更强  不支持注解导入配置")]),t._v(" "),a("li",[t._v("properties： 键值对 =\n##108.spring boot 有哪些方式可以实现热部署？\nSpring Loaded spring-boot-evtools\n##110.什么是 spring cloud？\n基于springboot的一套微服务治理方案，用于快速构建分布式系统\n##111.spring cloud 断路器的作用是什么？\n防止雪崩效应，当一个请求调用另一个请求时，由于网络或者自身的原因出现问题，就会出现长时间等待\n##112.spring cloud 的核心组件有哪些？\neurack 注册中心 hystrix 熔断器  ribbon 负载均衡 config 配置中心  zuul 路由")])]),t._v(" "),a("p",[t._v("#mysql\n##什么是事物,\n事物是一组具有原子性的sql语句，或者说是一个独立的工作单元\n##说一下 ACID 是什么？")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("ATOMICITY 原子性 一个事物必须被视为一个不可分可的最小工作单元，事物中的操作要么全部成功，要么全部失败")]),t._v(" "),a("li",[t._v("CONSISTENCY 一致性 指事物从一种一致性状态装换为另一种一致性状态，转账总余额不变,事物开始之前和之后数据库的数据的完整性没有被破坏")]),t._v(" "),a("li",[t._v("ISOLATION 隔离性 一个事物对数据库数据的操作，在未提交完成前，对于其他事物是不可见的")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("未提交读 事物对数据的修改，即使没提交对其他事物也是可见的。这个读取操作叫做脏读，数据就叫脏数据")]),t._v(" "),a("li",[t._v("已提交读 一个事物开始到结束中间的修改对其他的事物是不可见的  解决脏读")]),t._v(" "),a("li",[t._v("可重复读 一个事物中对一个数据的多次读取结果是一致的")]),t._v(" "),a("li",[t._v("串行化 在读取的每一行数据上加锁")])])]),t._v(" "),a("ul",[a("li",[t._v("持久性，一旦提交，所做的修改即使系统崩溃也不会丢失")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);