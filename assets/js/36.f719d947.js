(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{504:function(l,i,e){"use strict";e.r(i);var v=e(29),_=Object(v.a)({},(function(){var l=this,i=l.$createElement,e=l._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[e("ul",[e("li",[l._v("双等于 和 equals的区别\n"),e("ul",[e("li",[l._v("如果是基本类型，双等于是比较两个值是否相等。")]),l._v(" "),e("li",[l._v("如果是引用类型，双等于是比较两个对象的引用地址是否相等，equals方法则是比较两个对象的值是否相等")])])]),l._v(" "),e("li",[l._v("integer a=128, integer b=128, int c=128, Integer d = new Integer(128) a 等于b 和 a等于c结果，为什么\n"),e("ul",[e("li",[l._v("a == b, false\n"),e("ul",[e("li",[l._v("Integer a = 128,实际上是调用Integer的valueOf方法，valueOf方法里首先判断值是否在 -128 ~ 127之间，直接从缓存中取，否则new Integer。所以a和b的引用地址是不一样的")])])]),l._v(" "),e("li",[l._v("a == c, true\n"),e("ul",[e("li",[l._v("Integer和int进行比较会自动拆箱，比较值，所以是true")])])]),l._v(" "),e("li",[l._v("a == d, false\n"),e("ul",[e("li",[l._v("引用地址不一样，故是false")])])])])]),l._v(" "),e("li",[l._v("try catch finally 和返回关键字的交叉运用")]),l._v(" "),e("li",[l._v('字符串的等于比较，常量池概念,String a = "e", String b = "e", String c = new String("e")\n'),e("ul",[e("li",[l._v('a == b, true, String a = "e"，会先去常量池（方法区（堆区））查找是否有该字符串，没有则创建一个"e"，String b = "e"，在常量池中找到了直接指向，所以结果是true')]),l._v(" "),e("li",[l._v('a == c, false, String c = new String("e")，直接开辟了另外一块内存区域，所以结果是false')])])]),l._v(" "),e("li",[l._v("List删除某个元素？list集合遍历删除的问题？\n"),e("ul",[e("li",[l._v("1 普通for循环遍历删除，根据下标删除")]),l._v(" "),e("li",[l._v("2 增强for循环删除会发生concurrentModificationException")]),l._v(" "),e("li",[l._v("3 迭代器方式删除")]),l._v(" "),e("li",[l._v("4 jdk8的stream流 filter过滤")])])]),l._v(" "),e("li",[l._v("String stringbuilder stringbuffer 的区别\n"),e("ul",[e("li",[l._v("String是不可变类，对String的改变都会引发新的对象生成。")]),l._v(" "),e("li",[l._v("StringBuilder 可以对string改变，多线程下不安全")]),l._v(" "),e("li",[l._v("StringBuffer 同样可以对string改变，区别是是多线程安全的，底层实现了同步锁")])])])]),l._v(" "),e("p",[l._v("框架问题")]),l._v(" "),e("ul",[e("li",[l._v("mybatis#和$的应用场景\n"),e("ul",[e("li",[l._v("区别是#会预编译，&是直接字符串拼接，有sql注入的风险")]),l._v(" "),e("li",[l._v("一般条件查询使用，& 排序，分库分表查询拼接")])])]),l._v(" "),e("li",[l._v("spring过滤器和拦截器的区别\n"),e("ul",[e("li",[l._v("相同点\n"),e("ul",[e("li",[l._v("二者都是aop思想的体现，都能做权限检查，日志记录等功能")])])]),l._v(" "),e("li",[l._v("不同点\n"),e("ul",[e("li",[l._v("拦截器\n"),e("ul",[e("li",[l._v("可以用于任何程序:web,application等")]),l._v(" "),e("li",[l._v("可以拦截spring的任何资源，对象，如：service，事务等，更加灵活")])])]),l._v(" "),e("li",[l._v("过滤器\n"),e("ul",[e("li",[l._v("Servlet规范规定，只能用于web程序")]),l._v(" "),e("li",[l._v("只能在servlet前后起作用")])])]),l._v(" "),e("li",[l._v("使用过滤器\n"),e("ul",[e("li",[l._v("实现Filter接口")])])]),l._v(" "),e("li",[l._v("使用拦截器\n"),e("ul",[e("li",[l._v("实现HandlerInterceptor接口")])])]),l._v(" "),e("li",[l._v("图解\n"),e("ul",[e("li",[l._v("![image-20210313111034397](/Users/liyong/Library/Application Support/typora-user-images/image-20210313111034397.png)")]),l._v(" "),e("li")])])])])])]),l._v(" "),e("li",[l._v("spring 注入方式有哪几种\n"),e("ul",[e("li",[l._v("set注入")]),l._v(" "),e("li",[l._v("构造器注入")]),l._v(" "),e("li",[l._v("属性注入 (常用)")])])]),l._v(" "),e("li",[l._v("beah的scope有哪些，作用域\n"),e("ul",[e("li",[l._v("singleton（默认），单例，IOC容器中只会存在一个共享的bean实例。")]),l._v(" "),e("li",[l._v("prototype: 多例，每次getBean都会创建新的实例对象。")]),l._v(" "),e("li",[l._v("当用户使用Spring的WebApplicationContext时\n"),e("ul",[e("li",[l._v("request: 仅在一次http请求中")]),l._v(" "),e("li",[l._v("session: Session中所有http请求共享同一个请求的bean实例。session结束后就会销毁bean")]),l._v(" "),e("li",[l._v("global: 全局")])])])])]),l._v(" "),e("li",[l._v("beanname如何注解命名\n"),e("ul",[e("li",[l._v('@Qualifier(value = "name")')])])]),l._v(" "),e("li",[l._v("mybatis一级缓存和二级缓存\n"),e("ul",[e("li",[l._v("一级缓存，默认开启\n"),e("ul",[e("li",[l._v("SqlSession级别，每个线程都会创建SqlSession对象,缓存的是对象(map存储的)，当SqlSession提交，关闭以及其他更新数据库操作发生，以及缓存就会清空。")])])]),l._v(" "),e("li",[l._v("二级缓存\n"),e("ul",[e("li",[l._v("SqlSessionFactory级别, 所有线程共享, 缓存的是数据。")])])]),l._v(" "),e("li",[l._v("查询顺序：二级缓存>一级缓存>数据库")])])]),l._v(" "),e("li",[l._v("autowied resource 注解的区别\n"),e("ul",[e("li",[l._v("共同点：都是用于注入bean的")]),l._v(" "),e("li",[l._v("不同点(autowied)：\n"),e("ul",[e("li",[l._v("autowied 默认是按照bytype注入的")]),l._v(" "),e("li",[l._v("如果要用byname方式注入，需要@qualifier注解搭配使用")]),l._v(" "),e("li",[l._v("属于spring包的注解")])])]),l._v(" "),e("li",[l._v("不同点(resource)：\n"),e("ul",[e("li",[l._v("resource 默认是按照byname注入的，类名首字母小写")]),l._v(" "),e("li",[l._v("可以注定byname或bytype注入，提供了name和type参数")]),l._v(" "),e("li",[l._v("属于j2ee包的注解")])])])])])])])}),[],!1,null,null,null);i.default=_.exports}}]);