(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{516:function(s,t,a){"use strict";a.r(t);var n=a(29),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_1-mysql-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql-索引"}},[s._v("#")]),s._v(" 1. MySql-索引")]),s._v(" "),a("p",[s._v("Mysql的索引类似于字典的目录，用于快速查找具有特定列值的行。如果没有索引的话，查找数据需要一行一行的找下去，这个时候表越大，花费的时间就越大。索引分为单列索引和组合索引。")]),s._v(" "),a("p",[s._v("索引也是一张表，该表保存了主键和索引字段，并指向索引表的记录。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("innoDB最多创建1017列，最多64个二级索引，单个索引最多包含16列，索引的最大长度为767字节")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("innoDB限制的官方文档"),a("OutboundLink")],1)])])])]),s._v(" "),a("p",[s._v("表的物理存储：")]),s._v(" "),a("ul",[a("li",[s._v("MyISAM")]),s._v(" "),a("li",[a("ul",[a("li",[s._v(".frm文件：与表相关的元数据信息都存放在fr m文件，包括表的结构定义信息，在数据库名目录下")]),s._v(" "),a("li",[s._v(".myd文件：引擎独有，存储表的数据")]),s._v(" "),a("li",[s._v(".myi文件：独有，索引相关的信息")])])]),s._v(" "),a("li",[s._v("InnoDB")]),s._v(" "),a("li",[a("ul",[a("li",[s._v(".frm文件：与表相关的元数据信息都存放在fr m文件，包括表的结构定义信息，在数据库名目录下")]),s._v(" "),a("li",[s._v("ibd/ibdata:都是用来存储数据和索引的，之所以有两个是因为InnoDB是可以通过配置文件来决定存储方式，ibd存储单个表数据或者ibdata存储所有表的数据。又叫独享表空间，共享表空间")])])])]),s._v(" "),a("p",[s._v("索引并不是越多越好，innoDB官方也对这方面做了限制，过多的建造索引虽然会增加查询速度，同时也会降低插入和更新数据的速度，mysql不仅要保存数据，还需要保存索引文件。")]),s._v(" "),a("h1",{attrs:{id:"_2-索引的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引的原理"}},[s._v("#")]),s._v(" 2. 索引的原理")]),s._v(" "),a("h2",{attrs:{id:"_2-1索引的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1索引的原理"}},[s._v("#")]),s._v(" 2.1索引的原理")]),s._v(" "),a("p",[s._v("所以的目的在于提高查询效率，与我们查书的目录是一个道理，先定位到章，在定位到页。书的目录也是需要占用页数的，同理索引页也是要存到磁盘空间的。那么索引插入的时机也是有关系的，在数据少的时候插入索引肯定比数据多的时候插入的快，所以在表设计之初就要想好要建立那些索引")]),s._v(" "),a("p",[s._v("mysql索引的本质就是通过不断的缩小查找范围来筛选出最终的结果（二分查找）。同时把随机的事件变为顺序的事件，就是每次都可以用同样的顺序来查找数据。")]),s._v(" "),a("p",[a("strong",[s._v("二分查找：")])]),s._v(" "),a("ul",[a("li",[s._v("二分查找的原理就是通过不断的分批查找，最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段......这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。")])]),s._v(" "),a("p",[s._v("搜索树，平均复杂度是lgN。具有不错的查询性能，但是数据库的情况比较复杂，一方面数据是保存在磁盘上的，另一方面为了提高性能，每次需要把数据读到内存中来计算。访问磁盘是非常消耗资源的，所以简单的搜索树很难满足复杂的应用场景。")]),s._v(" "),a("h2",{attrs:{id:"_2-2-磁盘io与预读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-磁盘io与预读"}},[s._v("#")]),s._v(" 2.2 磁盘IO与预读")]),s._v(" "),a("p",[s._v("磁盘读取数据靠的是机械运动，就转圈吗。一次磁盘IO的时间大约是9ms。但是一台普通的机器每秒可以执行5亿条指令，因为指令中依靠的是电的性质。相当于一次磁盘IO CPU可以执行500万条指令。所以磁盘IO是非常高昂的操作，所以计算机系统做了一些优化，当一次IO的时候，不光读取当前磁盘地址的数据，还把相邻地址的数据读取出来。一次IO读取的数据可以称为一页。")]),s._v(" "),a("h2",{attrs:{id:"_2-3-索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-索引的数据结构"}},[s._v("#")]),s._v(" 2.3 索引的数据结构")]),s._v(" "),a("p",[s._v("索引的目的就是减少磁盘的IO，加速查询速度。mysql-innoDB使用的"),a("code",[s._v("B+树")]),s._v("结构来实现的，"),a("code",[s._v("B+树")]),s._v("是一个高度可控的多路搜索树（通过二叉查找树，再由平衡二叉树，B树演化而来）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img2018.cnblogs.com/blog/1730003/201909/1730003-20190904153244905-527142719.png",alt:"img"}})]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("B+树的查找过程：")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果查找数据29的话查询的步骤如下")])]),s._v(" "),a("ul",[a("li",[s._v("从磁盘中读取磁盘块1到内存中，发生第一次磁盘IO。然后使用二分查找发现29在17到35之间，那么确定数据在P2的磁盘块下。")]),s._v(" "),a("li",[s._v("从磁盘中读取磁盘快3到内存中，发生第二次磁盘IO。然后使用二分查找发现29在26到30之间，那么确定数据在P2的磁盘块下。")]),s._v(" "),a("li",[s._v("这时发生第三次IO加载磁盘块8，并使用二分查找找到结果，")])]),s._v(" "),a("blockquote",[a("p",[s._v("本次查询结果用使用三次磁盘IO,性能对于没有索引的动则百计的IO提升非常大。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("B+树的性质：")])]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("索引的字段要尽量的小")]),s._v("：索引的IO次数取决于树的高低，因为每个数据块到根结点的距离是相同的。")]),s._v(" "),a("p",[s._v("假设当前  数据表总数 = n ,每个磁盘块的 数据项的数量 = m , 则：")]),s._v(" "),a("p",[s._v("$$\nh=\\log(m+1)n\n$$\n当数据量N不变的情况下，M越大，h越小。而M磁盘块的大小是固定的，一般默认是16KB,如果一个数据项占用的空间越小，数量就越多。树的高度就越低。这就是为什么B+树把数据放到叶子结点而不是内层节点，一般一个磁盘块至少有两条数据，当一个磁盘块的数据项等于一的时候将会退化为线性表。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("索引的最左匹配特性")]),s._v("：简单的说就是数据来了之后，从数据块的最左边开始匹配，然后匹配右边的。B+树的数据项是复合的数据结构，如果（name,age,sex）的时候顺序来建立搜索树的，在检索的时候也是同理，先比较name,name相同在一次比较age,sex。但是如果来查询a ge,sex这样的查询条件的话，索引就不知道从什么开始找，因为name是第一个比较因子。")])])])])]),s._v(" "),a("h1",{attrs:{id:"_3-聚集索引-辅助索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-聚集索引-辅助索引"}},[s._v("#")]),s._v(" 3.聚集索引&&辅助索引")]),s._v(" "),a("h2",{attrs:{id:"_3-1-聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-聚集索引"}},[s._v("#")]),s._v(" "),a("strong",[s._v("3.1 聚集索引")])]),s._v(" "),a("p",[s._v("指的就是数据表的主键，innoDB存储引擎存储数据的时候必须要有一个主键，如果没有设置主键会选择一个不包含null的唯一索引当主键。如果还没有会使用行号生成一个隐藏主键。InnoDB的索引文件放在.idb文件里面，InnoDB存储引擎在存储数据的时候默认就是按照索引的树形结构来存储数据的，所以这种索引称之为聚集索引，就是说是在聚集数据组织数据的时候用的索引。")]),s._v(" "),a("p",[s._v("在数据库中，B+树的高度一般为2-4层，以为这查询一次只需要0.02到0.04秒")]),s._v(" "),a("p",[s._v("InnoDB存储引擎表示索引组织表，即表中的数据按照主键顺序排放，聚集索引就是按照每张表的主键构件一颗B+树。数据存放在叶子结点，称为数据页，并且每个数据页都是通过双向链表链接起来的。")]),s._v(" "),a("p",[s._v("范围查询：如果想要找到某一范围的数据，通过叶子节点的上层中间节点就可以得到页的范围，可以快速读取到数据也。")]),s._v(" "),a("h2",{attrs:{id:"_3-2-辅助索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-辅助索引"}},[s._v("#")]),s._v(" 3.2 辅助索引")]),s._v(" "),a("p",[s._v("表的主键是聚集索引，但是实际使用中往往需要通过其他字段来查询数据，比如name 这个时候就需要用到辅助索引，表中除了聚集索引其他的都是辅助索引。")]),s._v(" "),a("p",[a("strong",[s._v("概念：")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("覆盖索引")]),s._v("： 辅助索引和聚集索引不同，辅助索引的叶子节点存放的该索引的值，是一个键值对，除了键值对还有一个bookmark（书签). 可以理解为一个{'name字段'，name的值，主键id值}，如果你要查找的数据只有name 那么直接在叶子节点上找到对应的值就行。这样称之为覆盖索引。")]),s._v(" "),a("li",[a("strong",[s._v("回表")]),s._v("：同上，如果你想通过name查找这个人的年纪，此时该索引的叶子节点只存储了name的值和该条数据的主键值，那么会取出主键的值再通过聚集索引来查处该条数据的其他值。这种方式称为"),a("code",[s._v("回表查询")])])]),s._v(" "),a("p",[a("strong",[s._v("实现：")])]),s._v(" "),a("p",[s._v("索引的功能就是加快速度查找，但是有一些所以除来加快查询外还有约束的功能。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("普通索引")]),s._v(" "),a("ul",[a("li",[s._v("Index: 加速查找")])])]),s._v(" "),a("li",[a("strong",[s._v("唯一索引")]),s._v(" "),a("ul",[a("li",[s._v("primary:主键索引，不能重复，不能为空")]),s._v(" "),a("li",[s._v("u nique:唯一索引，不能重复，可以为空")])])]),s._v(" "),a("li",[a("strong",[s._v("联合索引")]),s._v(" "),a("ul",[a("li",[s._v("primary key(id,name):联合主键索引")]),s._v(" "),a("li",[s._v("Unique(id,name): 联合唯一索引")]),s._v(" "),a("li",[s._v("index(id,name):联合普通索引")])])])]),s._v(" "),a("h1",{attrs:{id:"_4-索引的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-索引的操作"}},[s._v("#")]),s._v(" 4. 索引的操作")]),s._v(" "),a("p",[s._v("三板斧（理论，实战，总结）")]),s._v(" "),a("h2",{attrs:{id:"_4-1-主键索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-主键索引"}},[s._v("#")]),s._v(" 4.1 主键索引")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建的时候添加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t1{\nId "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n}\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t2{\nid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n}\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ----------------")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建完成之后添加")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("primary")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"_4-2-唯一索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-唯一索引"}},[s._v("#")]),s._v(" 4.2 唯一索引")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\nId "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unique")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\nId "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Unique")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" uni_name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表创建好之后添加唯一索引:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unique")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("  u_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" u_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"_4-3-普通索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-普通索引"}},[s._v("#")]),s._v(" 4.3 普通索引")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 普通索引:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\nId "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Index")]),s._v(" index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" index_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("drop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" u_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" 索引名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 表名字"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("注意事项：创建索引的时候尽量给数据比较小的字段添加索引，树会比较矮。给数据区分度比较高的字段添加索引，二次查找返回会比较小。")])]),s._v(" "),a("h2",{attrs:{id:"_4-4-使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-使用场景"}},[s._v("#")]),s._v(" 4.4 使用场景")]),s._v(" "),a("div",{staticClass:"language-tex extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tex"}},[a("code",[s._v("举个例子来说，比如你在为某商场做一个会员卡的系统。\n\n这个系统有一个会员表\n有下列字段：\n会员编号 INT\n会员姓名 VARCHAR(10)\n会员身份证号码 VARCHAR(18)\n会员电话 VARCHAR(10)\n会员住址 VARCHAR(50)\n会员备注信息 TEXT\n\n那么这个 会员编号，作为主键，使用 PRIMARY\n会员姓名 如果要建索引的话，那么就是普通的 INDEX\n会员身份证号码 如果要建索引的话，那么可以选择 UNIQUE （唯一的，不允许重复）\n\n#除此之外还有全文索引，即FULLTEXT\n会员备注信息 ， 如果需要建索引的话，可以选择全文搜索。\n用于搜索很长一篇文章的时候，效果最好。\n用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。\n但其实对于全文搜索，我们并不会使用MySQL自带的该索引，而是会选择第三方软件如Sphinx，专门来做全文搜索。\n\n#其他的如空间索引SPATIAL，了解即可，几乎不用\n\n抄过来的\n")])])]),a("h2",{attrs:{id:"_4-5-索引的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-索引的类型"}},[s._v("#")]),s._v(" 4.5 索引的类型")]),s._v(" "),a("ul",[a("li",[s._v("Hash 索引： 查询单条快，范围查询慢。")]),s._v(" "),a("li",[s._v("Btree索引：层数越多，数据量指数级增长，适合范围查询")])]),s._v(" "),a("p",[s._v("不同的存储引擎支持的索引类型也不一样")]),s._v(" "),a("ul",[a("li",[s._v("InnoDB： 支持事物，支持行级锁定，B-Tree,Full-test")]),s._v(" "),a("li",[s._v("MyISAM: 不支持事物，同上")]),s._v(" "),a("li",[s._v("Memory: 不支持事物，表级锁定。支持B-tree,hash,不支持full-text.")]),s._v(" "),a("li",[s._v("NDB: 支持事物，支持行级锁定。只支持hash")]),s._v(" "),a("li",[s._v("Archive: 不支持事物。表级别锁定，不支持三个索引")])]),s._v(" "),a("h1",{attrs:{id:"_5-测试索引-实操"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试索引-实操"}},[s._v("#")]),s._v(" 5. 测试索引-实操")]),s._v(" "),a("h2",{attrs:{id:"_5-1-准备表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-准备表"}},[s._v("#")]),s._v(" 5.1 准备表")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1. 准备表")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\nid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\nname "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\ngender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\nemail "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2. 创建存储过程，实现批量插入记录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delimiter")]),s._v(" $$ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#声明存储过程的结束符号为$$")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("procedure")]),s._v(" auto_insert1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("insert")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("concat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'@oldboy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v("$$ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#$$结束")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delimiter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重新声明分号为结束符号")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3. 查看存储过程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("procedure")]),s._v(" auto_insert1\\G \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#4. 调用存储过程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" auto_insert1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"_5-2-普通查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-普通查询"}},[s._v("#")]),s._v(" 5.2 普通查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#无索引：mysql根本就不知道到底是否存在id等于333333333的记录，也不知道存在几条id=333333333的记录，只能把数据表从头到尾扫描一遍，此时有多少个磁盘块就需要进行多少IO操作，所以查询速度很慢")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("333333333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nEmpty "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.33")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("h2",{attrs:{id:"_5-3-建立索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-建立索引"}},[s._v("#")]),s._v(" 5.3 建立索引")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("在表中已经存在大量数据的情况下，建立索引，会非常的慢")])]),s._v(" "),a("h2",{attrs:{id:"_5-4-索引查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-索引查询"}},[s._v("#")]),s._v(" 5.4 索引查询")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3333333333")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("很快啊。因为找不到这个主键")])]),s._v(" "),a("h2",{attrs:{id:"_5-5-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-总结"}},[s._v("#")]),s._v(" 5.5 总结")]),s._v(" "),a("ol",[a("li",[s._v("要为常用的搜索条件建立索引")]),s._v(" "),a("li",[s._v("在表中已有数据的情况下建立索引会很慢，但是会增加查询数据")]),s._v(" "),a("li",[s._v("建立索引很降低修改，插入，删除数据的效率。因为需要修改索引结构")]),s._v(" "),a("li",[s._v("不要过多的滥用索引，过多的建立索引会将读数据的插入速度，每次插入数据都需要做好一个数据结构，然后写回磁盘，IO飙升。")])]),s._v(" "),a("h1",{attrs:{id:"_6-索引命中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-索引命中"}},[s._v("#")]),s._v(" 6 索引命中")]),s._v(" "),a("p",[s._v("真实中并不是建立了索引所有的查询就会加快查询速度，同上的例子，如果用email当作查询条件。速度依然很慢。因为这个查询并没有命中索引。那是不是把where后面的条件加上索引就会直接命中嘞  不一定。情况如下：")]),s._v(" "),a("h2",{attrs:{id:"_1-范围查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-范围查询"}},[s._v("#")]),s._v(" "),a("strong",[s._v("1. 范围查询")])]),s._v(" "),a("p",[s._v("或者说条件不明确，> , >= , < , <= , != , between , like 等等")]),s._v(" "),a("ul",[a("li",[s._v("= ：明确找一个值，可以在索引数中快速找到")]),s._v(" "),a("li",[s._v(">： 同样会用到索引数，但是如果查询的范围特别大的话，跟全表扫描差不多")]),s._v(" "),a("li",[s._v("> and <: 会用到索引，如果范围小的话，查询速度也很快的")]),s._v(" "),a("li",[s._v("!= ： 不等于是一个很大的范围，几乎等同于扫全表")]),s._v(" "),a("li",[s._v("between: 会用索引，根据范围来决定速度")])]),s._v(" "),a("h2",{attrs:{id:"_2-模糊查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-模糊查询"}},[s._v("#")]),s._v(" "),a("strong",[s._v("2. 模糊查询")])]),s._v(" "),a("p",[s._v("这个比较特殊了啊")]),s._v(" "),a("p",[s._v("案例：先给刚刚的email建立一个索引")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建的很慢啊")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 完成之后我们查看一下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v(" iot_risk_customer\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-------------------+--------------+------+-----+---------+-----------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Field             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Type")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Key")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-------------------+--------------+------+-----+---------+-----------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("NO")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" PRI "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto_increment")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" email    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" YES  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" MUL "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-------------------+--------------+------+-----+---------+-----------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key这一列有MUL说明创建成功")]),s._v("\n")])])]),a("ul",[a("li",[s._v("Like: 如果没有通配符，那么跟=是一个效果，精准匹配")]),s._v(" "),a("li",[s._v("右边通配符：速度依然很快")]),s._v(" "),a("li",[s._v("左边通配符：速度变慢")])]),s._v(" "),a("blockquote",[a("p",[s._v("因为左边通配符没有用到索引，索引采用最左匹配原则，即树的查找是从左边开始的。")])]),s._v(" "),a("h2",{attrs:{id:"_3-区分度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-区分度"}},[s._v("#")]),s._v(" 3. 区分度")]),s._v(" "),a("p",[s._v("尽量选择区分度比较高的列作为索引，区分度的公式为"),a("code",[s._v("count(distinct col)/count(*)")]),s._v(",表示字段不重复的比例，比例越大，扫描的记录越少，唯一的区分度是1，而一些字段比如性别，在大数据面前约等于0。一般需要join的字段都要求是0.1，即一条数据扫描十条记录")]),s._v(" "),a("blockquote",[a("p",[s._v("区分度也影响到树的高度，对于区分度低的字段，无法找到大小关系，树是按照大小顺序存放的。这些值区分度越低的话那么树越高，如果索引字段都一样的话，那么这跟树几乎成了一根棍。")])]),s._v(" "),a("h2",{attrs:{id:"_4-和in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-和in"}},[s._v("#")]),s._v(" 4.= 和in")]),s._v(" "),a("p",[s._v("可以乱序，比如 "),a("code",[s._v("a = 1 and b = 2 and c = 3")]),s._v(" 建立(a,b,c）索引可以任意顺序，因为索引优化器会优化。")]),s._v(" "),a("ol",[a("li",[s._v("索引列不能参与计算。保持列干净，"),a("strong",[s._v("比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)")])])]),s._v(" "),a("h2",{attrs:{id:"_5-and-or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-and-or"}},[s._v("#")]),s._v(" 5. And\\or")]),s._v(" "),a("h3",{attrs:{id:"_5-1-and"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-and"}},[s._v("#")]),s._v(" 5.1 and")]),s._v(" "),a("p",[s._v("所有条件成立则最终结果成立")]),s._v(" "),a("ul",[a("li",[s._v("条件：        a = 10 and b = 'xxx' and c > 3 and d =4")]),s._v(" "),a("li",[s._v("索引：        制作联合索引(d,a,b,c)")])]),s._v(" "),a("p",[s._v("Mysql 索引的本质原理就是不断的缩小查询范围，对于多个and。mysql会按照从左到右找一个区分度表高的数据，这样可以最快的缩小范围，加速查询即按照d—>a->b->c的顺序。")]),s._v(" "),a("p",[s._v("先找区别度高的列查询")]),s._v(" "),a("h3",{attrs:{id:"_5-2-or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-or"}},[s._v("#")]),s._v(" 5.2 or")]),s._v(" "),a("p",[s._v("只要有一个条件成立，那么结果就成立")]),s._v(" "),a("ul",[a("li",[s._v("条件：        a = 10 or b = 'xxx' or c > 3 or d =4")]),s._v(" "),a("li",[s._v("索引：        制作联合索引(d,a,b,c)")])]),s._v(" "),a("p",[s._v("只要有一个匹配成功就行，所以对于连续多个，会按照查询顺序来判断 即 a->b->c->d")]),s._v(" "),a("h2",{attrs:{id:"_6-最左匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-最左匹配"}},[s._v("#")]),s._v(" 6. 最左匹配")]),s._v(" "),a("p",[a("strong",[s._v("最左前缀匹配原则（详见第八小节），非常重要的原则，对于组合索引mysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配(指的是范围大了，有索引速度也慢)，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。")])]),s._v(" "),a("h2",{attrs:{id:"_7-其他情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-其他情况"}},[s._v("#")]),s._v(" 7. 其他情况")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("使用函数：")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tb1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不走索引 要保持干净")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[s._v("类型不一致")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("如果列是字符串类型，传入条件是必须用引号引起来，不然"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" tb1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" email "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[s._v("排序")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" email "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当根据索引排序的时候，select查询的字段必须也是索引字段")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要按照email索引的顺序查询，然后去主键索引查询，性能不佳")]),s._v("\n")])])]),a("blockquote",[a("p",[s._v("主键排序除外，因为主键的叶子节点上存的是整条数据")])])])]),s._v(" "),a("p",[s._v("其他注意事项")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- 避免使用select *\n- count(1)或count(列) 代替 count(*)\n- 创建表时尽量时 char 代替 varchar\n- 表的字段顺序固定长度的字段优先\n- 组合索引代替多个单列索引（经常使用多个条件查询时）\n- 尽量使用短索引\n- 使用连接（JOIN）来代替子查询(Sub-Queries)\n- 连表时注意条件类型需一致\n- 索引散列值（重复少）不适合建索引，例：性别不适合\n")])])]),a("h1",{attrs:{id:"_7-联合索引-覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-联合索引-覆盖索引"}},[s._v("#")]),s._v(" 7.联合索引&&覆盖索引")]),s._v(" "),a("h2",{attrs:{id:"_7-1-联合索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-联合索引"}},[s._v("#")]),s._v(" 7.1 联合索引")]),s._v(" "),a("p",[s._v("对表上的多个列联合起来做一个索引，如果查询条件列一直在变，则需要组合索引。")]),s._v(" "),a("p",[s._v("注意索引最左匹配：区分度高的列放在前面，范围查询放在后面。")]),s._v(" "),a("p",[s._v("联合索引自动排序：在第一个键相同的情况下，会自动对第二个键进行排序处理")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#对于联合索引（a,b）,下述语句可以直接使用该索引，无需二次排序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxx "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#然后对于联合索引(a,b,c)来首，下列语句同样可以直接通过索引得到结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxx "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("xxx "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#但是对于联合索引(a,b,c)，下列语句不能通过索引直接得到结果，还需要自己执行一次filesort操作，因为索引（a，c)并未排序")]),s._v("\n")])])]),a("h2",{attrs:{id:"_7-2-覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-覆盖索引"}},[s._v("#")]),s._v(" 7.2 覆盖索引")]),s._v(" "),a("p",[a("strong",[s._v("InnoDB存储引擎支持覆盖索引（covering index，或称索引覆盖），即从辅助索引中就可以得到查询记录，而不需要查询聚集索引中的记录。")])]),s._v(" "),a("p",[a("strong",[s._v("使用覆盖索引的一个好处是：辅助索引不包含整行记录的所有信息，故其大小要远小于聚集索引，因此可以减少大量的IO操作")])]),s._v(" "),a("h1",{attrs:{id:"_8-优化-explain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-优化-explain"}},[s._v("#")]),s._v(" 8 优化-explain")]),s._v(" "),a("p",[a("strong",[s._v("关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("执行计划：让mysql预估执行操作(一般正确)\n    all < index < range < index_merge < ref_or_null < ref < eq_ref < system/const\n    id,email\n    \n    慢：\n        select * from userinfo3 where name='alex'\n        \n        explain select * from userinfo3 where name='alex'\n        type: ALL(全表扫描)\n            select * from userinfo3 limit 1;\n    快：\n        select * from userinfo3 where email='alex'\n        type: const(走索引)\n")])])]),a("h1",{attrs:{id:"_9-万能优化法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-万能优化法"}},[s._v("#")]),s._v(" 9 万能优化法")]),s._v(" "),a("p",[s._v("这次来点狠的")]),s._v(" "),a("p",[s._v("开启trace 来追踪")]),s._v(" "),a("p",[a("strong",[s._v("1. 查看优化器的状态")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'optimizer_trace'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Variable_name   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Value")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" optimizer_trace "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" enabled"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("off")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("one_line"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("off")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-----------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.03")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[a("strong",[s._v("2.会话级别临时开启")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("session")]),s._v(" optimizer_trace"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"enabled=on"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("end_markers_in_json"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nQuery OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" affected "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.03")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("3."),a("strong",[s._v("设置优化器追踪的内存大小")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" OPTIMIZER_TRACE_MAX_MEM_SIZE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nQuery OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" affected "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.03")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意：不设置优化器最大容量的话，可能会导致优化器返回的结果不全。")]),s._v("\n")])])]),a("p",[a("strong",[s._v("4.执行自己的sql")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("customer_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("project_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("case_name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" iot_risk_customer A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" adm_iot_riskcontrol_case_customer_dd B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("project_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("case_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("5.information_schema.optimizer_trace表")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" trace "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" information_schema"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OPTIMIZER_TRACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("导入到一个命名为xx.trace的文件，然后用JSON阅读器来查看")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" TRACE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DUMPFILE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E:\\\\test.trace"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" INFORMATION_SCHEMA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OPTIMIZER_TRACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果没有控制台权限，或直接交由运维，让他把该 trace 文件，输出给你就行了。")]),s._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "steps": [\n    {\n      "join_preparation": { //准备阶段，包查询语句转换\n        "select#": 1,\n        "steps": [\n          {\n            "expanded_query": "/* select#1 */ select `a`.`customer_name` AS `customer_name`,`a`.`project_id` AS `project_id`,`b`.`case_name` AS `case_name` from (`iot_risk_customer` `a` left join `adm_iot_riskcontrol_case_customer_dd` `b` on((`a`.`project_id` = `b`.`case_id`))) limit 1000"\n          },\n          {\n            "transformations_to_nested_joins": {\n              "transformations": [\n                "parenthesis_removal"\n              ] ,\n              "expanded_query": "/* select#1 */ select `a`.`customer_name` AS `customer_name`,`a`.`project_id` AS `project_id`,`b`.`case_name` AS `case_name` from `iot_risk_customer` `a` left join `adm_iot_riskcontrol_case_customer_dd` `b` on((`a`.`project_id` = `b`.`case_id`)) limit 1000"\n            } \n          }\n        ] \n      } \n    },\n    {\n      "join_optimization": { //优化阶段，包括以下主要阶段\n        "select#": 1,\n        "steps": [\n          {\n            "condition_processing": { //处理where条件部分，主要包括等式处理、常量处理、多余条件处理\n              "condition": "WHERE",\n              "original_condition": null,\n              "steps": [\n                {\n                  "transformation": "equality_propagation",\n                  "resulting_condition": null\n                }\n              ] \n            } \n          },\n          {\n            "table_dependencies": [ //表依赖检查\n              {\n                "table": "`iot_risk_customer` `a`",\n                "row_may_be_null": false,\n                "map_bit": 0,\n                "depends_on_map_bits": [\n                ] \n              },\n              {\n                "table": "`adm_iot_riskcontrol_case_customer_dd` `b`",\n                "row_may_be_null": true,\n                "map_bit": 1,\n                "depends_on_map_bits": [\n                  0\n                ] \n              }\n            ]\n          },\n          {\n            "ref_optimizer_key_uses": [ //评估可用的索引\n              {\n                "table": "`adm_iot_riskcontrol_case_customer_dd` `b`",\n                "field": "case_id", //可以用的索引\n                "equals": "`a`.`project_id`",\n                "null_rejecting": true\n              }\n            ] \n          },\n          {\n            "rows_estimation": [ //评估访问单表的方式，及扫描的行数与代价\n              {\n                "table": "`iot_risk_customer` `a`",\n                "table_scan": {\n                  "rows": 144672, //需要扫描的行数\n                  "cost": 6508  //可以看作查询需要6秒\n                } \n              },\n              {\n                "table": "`adm_iot_riskcontrol_case_customer_dd` `b`",\n                "table_scan": {\n                  "rows": 95, //需要扫描的行数\n                  "cost": 1 //忽略不计\n                } \n              }\n            ] \n          },\n          {\n            "considered_execution_plans": [ //评估最终可使用的执行计划\n              {\n                "plan_prefix": [\n                ] ,\n                "table": "`iot_risk_customer` `a`",\n                "best_access_path": {\n                  "considered_access_paths": [\n                    {\n                      "rows_to_scan": 144672,\n                      "access_type": "scan",\n                      "resulting_rows": 144672,\n                      "cost": 35442,\n                      "chosen": true\n                    }\n                  ] \n                } ,\n                "condition_filtering_pct": 100,\n                "rows_for_plan": 144672,\n                "cost_for_plan": 35442,\n                "rest_of_plan": [\n                  {\n                    "plan_prefix": [\n                      "`iot_risk_customer` `a`"\n                    ] ,\n                    "table": "`adm_iot_riskcontrol_case_customer_dd` `b`",\n                    "best_access_path": {\n                      "considered_access_paths": [\n                        {\n                          "access_type": "eq_ref",\n                          "index": "PRIMARY",\n                          "rows": 1,\n                          "cost": 173606,\n                          "chosen": true,\n                          "cause": "clustered_pk_chosen_by_heuristics"\n                        },\n                        {\n                          "rows_to_scan": 95,\n                          "access_type": "scan",\n                          "using_join_cache": true,\n                          "buffers_needed": 164,\n                          "resulting_rows": 95,\n                          "cost": 2.75e6,\n                          "chosen": false\n                        }\n                      ] \n                    } ,\n                    "condition_filtering_pct": 100,\n                    "rows_for_plan": 144672,\n                    "cost_for_plan": 209049,\n                    "chosen": true\n                  }\n                ]\n              }\n            ] \n          },\n          {\n            "condition_on_constant_tables": "1",\n            "condition_value": true\n          },\n          {\n            "attaching_conditions_to_tables": {\n              "original_condition": "1",\n              "attached_conditions_computation": [\n              ] ,\n              "attached_conditions_summary": [\n                {\n                  "table": "`iot_risk_customer` `a`",\n                  "attached": null\n                },\n                {\n                  "table": "`adm_iot_riskcontrol_case_customer_dd` `b`",\n                  "attached": "<if>(is_not_null_compl(B), (`a`.`project_id` = `b`.`case_id`), true)"\n                }\n              ] \n            } \n          },\n          {\n            "refine_plan": [\n              {\n                "table": "`iot_risk_customer` `a`"\n              },\n              {\n                "table": "`adm_iot_riskcontrol_case_customer_dd` `b`"\n              }\n            ] \n          }\n        ] \n      } \n    },\n    {\n      "join_execution": {\n        "select#": 1,\n        "steps": [\n        ] \n      }\n    }\n  ]\n}\n')])])]),a("p",[s._v("主要关注")]),s._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows_estimation"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//评估访问单表的方式，及扫描的行数与代价")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`iot_risk_customer` `a`"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_scan"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144672")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要扫描的行数")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6508")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以看作查询需要6秒")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`adm_iot_riskcontrol_case_customer_dd` `b`"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"table_scan"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"rows"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("95")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要扫描的行数")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"cost"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//忽略不计")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])]),a("p",[s._v("以上优化器的主要步骤：")]),s._v(" "),a("ol",[a("li",[s._v("join_preparation ：准备阶段，包查询语句转换，转换成嵌套循环语句等")])]),s._v(" "),a("p",[s._v("expanded_query")]),s._v(" "),a("p",[s._v("transformations_to_nested_joins")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("join_optimization ：优化阶段，包括以下主要阶段")])]),s._v(" "),a("p",[s._v("condition_processing ：处理where条件部分，主要包括等式处理、常量处理、多余条件处理")]),s._v(" "),a("p",[s._v("table_dependencies ：表依赖检查")]),s._v(" "),a("p",[s._v("ref_optimizer_key_uses ：评估可用的索引")]),s._v(" "),a("p",[s._v("rows_estimation    ：评估访问单表的方式，及扫描的行数与代价")]),s._v(" "),a("p",[s._v("considered_execution_plans ：评估最终可使用的执行计划")]),s._v(" "),a("p",[s._v("condition_on_constant_tables :检查带常量表的条件")]),s._v(" "),a("p",[s._v("attaching_conditions_to_tables ：将常量条件作用到表")]),s._v(" "),a("p",[s._v("refine_plan 改进计划，不理解")]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("join_execution ：执行阶段")])]),s._v(" "),a("p",[s._v("神奇的B+树")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://mrtao-bucket.oss-cn-shanghai.aliyuncs.com/1618905597834-B%2B%E6%A0%91.png",alt:""}})])])}),[],!1,null,null,null);t.default=e.exports}}]);